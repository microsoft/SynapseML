name: Clean ACR
on: workflow_dispatch
jobs:
  clean-acr:
     name: Clean ACR
     runs-on: ubuntu-latest
     steps:
       - uses: Azure/get-keyvault-secrets@v1
         with: 
           keyvault: 'mmlspark-keys'
           secrets: 'clean-acr-connection-string'
         id: getConnectionString
       - name: checkout repo content
         uses: actions/checkout@v2 # checkout the repo
       - name: setup python
         uses: actions/setup-python@v4
         with:
           python-version: '3.x'
           cache: 'pip'
       - run: pip install azure-storage-blob azure-identity tqdm
       - name: execute clean acr
         uses: jannekem/run-python-script-action@v1
         with:
           script: |
             import os
             import json
             from azure.storage.blob import BlobClient
             from azure.identity import DefaultAzureCredential
             import sys
             import subprocess
             from tqdm import tqdm
          
             credential = DefaultAzureCredential()
             """
             run this if sas expires and place result in keyvault under secret name 
          
              IMPORT_SAS=?$(az storage container generate-sas \
                --name acrbackup \
                --account-name mmlspark \
                --expiry 2023-01-01 \
                --permissions rawdl \
                --https-only \
                --output tsv)
                echo $IMPORT_SAS
             """

             acr = "mmlsparkmcr"
             container = "acrbackup"
             rg = "marhamil-mmlspark"
             pipeline = "mmlsparkacrexport3"
          
             #conn_string = sys.argv[1]
             conn_string = ${{ steps.getConnectionString.output.clean-acr-connection-string }}
          
             os.popen('az extension add --name acrtransfer')
          
             repos = json.loads(os.popen(
                 'az acr repository list -n {}'.format(acr)).read())
                 for repo in repos:
                     tags = json.loads(os.popen(
                             'az acr repository show-tags -n {} --repository {} --orderby time_desc'.format(acr, repo)).read())
          
                 for tag in tqdm(tags):
                     target_blob = repo + "/" + tag + ".tar"
                     image = repo + ":" + tag
          
                 backup_exists = BlobClient.from_connection_string(
                     conn_string, container_name=container, blob_name=target_blob).exists()
                 if not backup_exists:
                     subprocess.run(["sudo", "az", "acr", "pipeline-run", "create", "--resource-group", rg,
                                   "--registry", acr, "--pipeline", pipeline, "--name", str(abs(hash(target_blob))),
                                   "--pipeline-type", "export", "--storage-blob", target_blob, "-a", image])
                     print("Transferred {}".format(target_blob))
                 else:
                     print("Skipped existing {}".format(image))
          
                 """
                 backup_exists = BlobClient.from_connection_string(
                     conn_string, container_name=container, blob_name=target_blob).exists()
                 if backup_exists:
                     print("Deleting {}".format(image))
                     result = os.system("az acr repository delete --name {} --image {} --yes".format(acr, image))
                     assert result == 0
                 """