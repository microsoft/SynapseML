"use strict";(self.webpackChunksynapseml=self.webpackChunksynapseml||[]).push([[30003],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),f=a,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||i;return t?r.createElement(m,o(o({ref:n},c),{},{components:t})):r.createElement(m,o({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},82623:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=t(83117),a=(t(67294),t(3905));const i={title:"Quickstart - Fine-tune a Vision Classifier",hide_title:!0,status:"stable"},o=void 0,l={unversionedId:"Explore Algorithms/Deep Learning/Quickstart - Fine-tune a Vision Classifier",id:"version-v1.0.11/Explore Algorithms/Deep Learning/Quickstart - Fine-tune a Vision Classifier",title:"Quickstart - Fine-tune a Vision Classifier",description:"Deep Learning - Deep Vision Classifier",source:"@site/versioned_docs/version-v1.0.11/Explore Algorithms/Deep Learning/Quickstart - Fine-tune a Vision Classifier.md",sourceDirName:"Explore Algorithms/Deep Learning",slug:"/Explore Algorithms/Deep Learning/Quickstart - Fine-tune a Vision Classifier",permalink:"/SynapseML/docs/Explore Algorithms/Deep Learning/Quickstart - Fine-tune a Vision Classifier",draft:!1,tags:[],version:"v1.0.11",frontMatter:{title:"Quickstart - Fine-tune a Vision Classifier",hide_title:!0,status:"stable"},sidebar:"docs",previous:{title:"Quickstart - Fine-tune a Text Classifier",permalink:"/SynapseML/docs/Explore Algorithms/Deep Learning/Quickstart - Fine-tune a Text Classifier"},next:{title:"Quickstart - ONNX Model Inference",permalink:"/SynapseML/docs/Explore Algorithms/Deep Learning/Quickstart - ONNX Model Inference"}},s={},p=[{value:"Deep Learning - Deep Vision Classifier",id:"deep-learning---deep-vision-classifier",level:2},{value:"Environment Setup on databricks",id:"environment-setup-on-databricks",level:3},{value:"-- reinstall horovod based on new version of pytorch",id:"---reinstall-horovod-based-on-new-version-of-pytorch",level:3},{value:"Read Dataset",id:"read-dataset",level:3},{value:"Training",id:"training",level:3},{value:"Prediction",id:"prediction",level:3}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"deep-learning---deep-vision-classifier"},"Deep Learning - Deep Vision Classifier"),(0,a.kt)("h3",{id:"environment-setup-on-databricks"},"Environment Setup on databricks"),(0,a.kt)("h3",{id:"---reinstall-horovod-based-on-new-version-of-pytorch"},"-- reinstall horovod based on new version of pytorch"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# install cloudpickle 2.0.0 to add synapse module for usage of horovod\n%pip install cloudpickle==2.0.0 --force-reinstall --no-deps\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import synapse\nimport cloudpickle\nimport os\nimport urllib.request\nimport zipfile\n\ncloudpickle.register_pickle_by_value(synapse)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"! horovodrun --check-build\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from pyspark.sql.functions import udf, col, regexp_replace\nfrom pyspark.sql.types import IntegerType\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator\n")),(0,a.kt)("h3",{id:"read-dataset"},"Read Dataset"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'folder_path = "/tmp/flowers_prepped"\nzip_url = "https://mmlspark.blob.core.windows.net/datasets/Flowers/flowers_prepped.zip"\nzip_path = "/dbfs/tmp/flowers_prepped.zip"\n\nif not os.path.exists("/dbfs" + folder_path):\n    urllib.request.urlretrieve(zip_url, zip_path)\n    with zipfile.ZipFile(zip_path, "r") as zip_ref:\n        zip_ref.extractall("/dbfs/tmp")\n    os.remove(zip_path)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def assign_label(path):\n    num = int(path.split("/")[-1].split(".")[0].split("_")[1])\n    return num // 81\n\n\nassign_label_udf = udf(assign_label, IntegerType())\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# These files are already uploaded for build test machine\ntrain_df = (\n    spark.read.format("binaryFile")\n    .option("pathGlobFilter", "*.jpg")\n    .load(folder_path + "/train")\n    .withColumn("image", regexp_replace("path", "dbfs:", "/dbfs"))\n    .withColumn("label", assign_label_udf(col("path")))\n    .select("image", "label")\n)\n\ndisplay(train_df.limit(100))\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'test_df = (\n    spark.read.format("binaryFile")\n    .option("pathGlobFilter", "*.jpg")\n    .load(folder_path + "/test")\n    .withColumn("image", regexp_replace("path", "dbfs:", "/dbfs"))\n    .withColumn("label", assign_label_udf(col("path")))\n    .select("image", "label")\n)\n')),(0,a.kt)("h3",{id:"training"},"Training"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from horovod.spark.common.store import DBFSLocalStore\nfrom pytorch_lightning.callbacks import ModelCheckpoint\nfrom synapse.ml.dl import *\nimport uuid\n\nrun_output_dir = f"/dbfs/FileStore/test/resnet50/{str(uuid.uuid4())[:8]}"\nstore = DBFSLocalStore(run_output_dir)\n\nepochs = 10\n\ncallbacks = [ModelCheckpoint(filename="{epoch}-{train_loss:.2f}")]\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'deep_vision_classifier = DeepVisionClassifier(\n    backbone="resnet50",\n    store=store,\n    callbacks=callbacks,\n    num_classes=17,\n    batch_size=16,\n    epochs=epochs,\n    validation=0.1,\n)\n\ndeep_vision_model = deep_vision_classifier.fit(train_df)\n')),(0,a.kt)("h3",{id:"prediction"},"Prediction"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'pred_df = deep_vision_model.transform(test_df)\nevaluator = MulticlassClassificationEvaluator(\n    predictionCol="prediction", labelCol="label", metricName="accuracy"\n)\nprint("Test accuracy:", evaluator.evaluate(pred_df))\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# Cleanup the output dir for test\ndbutils.fs.rm(run_output_dir, True)\n")))}u.isMDXComponent=!0}}]);