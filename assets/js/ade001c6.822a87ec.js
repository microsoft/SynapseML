"use strict";(self.webpackChunksynapseml=self.webpackChunksynapseml||[]).push([[45121],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>y});var n=a(67294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var i=n.createContext({}),c=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,o=e.originalType,i=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),u=c(a),y=s,d=u["".concat(i,".").concat(y)]||u[y]||p[y]||o;return a?n.createElement(d,l(l({ref:t},m),{},{components:a})):n.createElement(d,l({ref:t},m))}));function y(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=a.length,l=new Array(o);l[0]=u;var r={};for(var i in t)hasOwnProperty.call(t,i)&&(r[i]=t[i]);r.originalType=e,r.mdxType="string"==typeof e?e:s,l[1]=r;for(var c=2;c<o;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},85162:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(67294),s=a(86010);const o="tabItem_Ymn6";function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,s.Z)(o,l),hidden:a},t)}},74866:(e,t,a)=>{a.d(t,{Z:()=>I});var n=a(83117),s=a(67294),o=a(86010),l=a(12466),r=a(16550),i=a(91980),c=a(67392),m=a(50012);function p(e){return function(e){var t;return(null==(t=s.Children.map(e,(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:s}}=e;return{value:t,label:a,attributes:n,default:s}}))}function u(e){const{values:t,children:a}=e;return(0,s.useMemo)((()=>{const e=t??p(a);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function y(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function d(e){let{queryString:t=!1,groupId:a}=e;const n=(0,r.k6)(),o=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,i._X)(o),(0,s.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(n.location.search);t.set(o,e),n.replace({...n.location,search:t.toString()})}),[o,n])]}function g(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,o=u(e),[l,r]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!y({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:o}))),[i,c]=d({queryString:a,groupId:n}),[p,g]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,o]=(0,m.Nk)(a);return[n,(0,s.useCallback)((e=>{a&&o.set(e)}),[a,o])]}({groupId:n}),v=(()=>{const e=i??p;return y({value:e,tabValues:o})?e:null})();(0,s.useLayoutEffect)((()=>{v&&r(v)}),[v]);return{selectedValue:l,selectValue:(0,s.useCallback)((e=>{if(!y({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);r(e),c(e),g(e)}),[c,g,o]),tabValues:o}}var v=a(72389);const f="tabList__CuJ",h="tabItem_LNqP";function b(e){let{className:t,block:a,selectedValue:r,selectValue:i,tabValues:c}=e;const m=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.o5)(),u=e=>{const t=e.currentTarget,a=m.indexOf(t),n=c[a].value;n!==r&&(p(t),i(n))},y=e=>{var t;let a=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=m.indexOf(e.currentTarget)+1;a=m[t]??m[0];break}case"ArrowLeft":{const t=m.indexOf(e.currentTarget)-1;a=m[t]??m[m.length-1];break}}null==(t=a)||t.focus()};return s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},t)},c.map((e=>{let{value:t,label:a,attributes:l}=e;return s.createElement("li",(0,n.Z)({role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,key:t,ref:e=>m.push(e),onKeyDown:y,onClick:u},l,{className:(0,o.Z)("tabs__item",h,null==l?void 0:l.className,{"tabs__item--active":r===t})}),a??t)})))}function T(e){let{lazy:t,children:a,selectedValue:n}=e;const o=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===n));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return s.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function k(e){const t=g(e);return s.createElement("div",{className:(0,o.Z)("tabs-container",f)},s.createElement(b,(0,n.Z)({},e,t)),s.createElement(T,(0,n.Z)({},e,t)))}function I(e){const t=(0,v.Z)();return s.createElement(k,(0,n.Z)({key:String(t)},e))}},31989:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(67294),s=a(52263);const o=function(e){const{className:t,py:a,scala:o,csharp:l,sourceLink:r}=e,i=(0,s.Z)().siteConfig.customFields.version;let c=`https://mmlspark.blob.core.windows.net/docs/${i}/pyspark/${a}`,m=`https://mmlspark.blob.core.windows.net/docs/${i}/scala/${o}`;return n.createElement("table",null,n.createElement("tbody",null,n.createElement("tr",null,n.createElement("td",null,n.createElement("strong",null,"Python API: "),n.createElement("a",{href:c},t)),n.createElement("td",null,n.createElement("strong",null,"Scala API: "),n.createElement("a",{href:m},t)),n.createElement("td",null,n.createElement("strong",null,"Source: "),n.createElement("a",{href:r},t)))))}},45723:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>R,contentTitle:()=>O,default:()=>V,frontMatter:()=>A,metadata:()=>F,toc:()=>P});var n=a(83117),s=(a(67294),a(3905)),o=a(74866),l=a(85162),r=a(31989);const i=[{value:"Text Analytics",id:"text-analytics",level:2},{value:"EntityDetector",id:"entitydetector",level:3},{value:"KeyPhraseExtractor",id:"keyphraseextractor",level:3},{value:"LanguageDetector",id:"languagedetector",level:3},{value:"NER",id:"ner",level:3},{value:"PII",id:"pii",level:3},{value:"TextSentiment",id:"textsentiment",level:3}],c={toc:i};function m(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"text-analytics"},"Text Analytics"),(0,s.kt)("h3",{id:"entitydetector"},"EntityDetector"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ntextKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n    ("1", "Microsoft released Windows 10"),\n    ("2", "In 1975, Bill Gates III and Paul Allen founded the company.")\n], ["id", "text"])\n\nentity = (EntityDetector()\n      .setSubscriptionKey(textKey)\n      .setLocation("eastus")\n      .setLanguage("en")\n      .setOutputCol("replies")\n      .setErrorCol("error"))\n\nentity.transform(df).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.text.EntityDetector\nimport spark.implicits._\nimport org.apache.spark.sql.functions.{col, flatten}\n\nval textKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n  ("1", "Microsoft released Windows 10"),\n  ("2", "In 1975, Bill Gates III and Paul Allen founded the company.")\n).toDF("id", "text")\n\nval entity = (new EntityDetector()\n  .setSubscriptionKey(textKey)\n  .setLocation("eastus")\n  .setLanguage("en")\n  .setOutputCol("replies"))\n\nentity.transform(df).show()\n')))),(0,s.kt)(r.Z,{className:"EntityDetector",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.EntityDetector",scala:"com/microsoft/azure/synapse/ml/cognitive/EntityDetector.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1EntityDetector.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextAnalytics.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"keyphraseextractor"},"KeyPhraseExtractor"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ntextKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n    ("en", "Hello world. This is some input text that I love."),\n    ("fr", "Bonjour tout le monde"),\n    ("es", "La carretera estaba atascada. Hab\xeda mucho tr\xe1fico el d\xeda de ayer.")\n], ["lang", "text"])\n\nkeyPhrase = (KeyPhraseExtractor()\n            .setSubscriptionKey(textKey)\n            .setLocation("eastus")\n            .setLanguageCol("lang")\n            .setOutputCol("replies")\n            .setErrorCol("error"))\n\nkeyPhrase.transform(df).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.text.KeyPhraseExtractor\nimport spark.implicits._\n\nval textKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n  ("en", "Hello world. This is some input text that I love."),\n  ("fr", "Bonjour tout le monde"),\n  ("es", "La carretera estaba atascada. Hab\xeda mucho tr\xe1fico el d\xeda de ayer."),\n  ("en", null)\n).toDF("lang", "text")\n\nval keyPhrase = (new KeyPhraseExtractor()\n  .setSubscriptionKey(textKey)\n  .setLocation("eastus")\n  .setLanguageCol("lang")\n  .setOutputCol("replies"))\n\nkeyPhrase.transform(df).show()\n')))),(0,s.kt)(r.Z,{className:"KeyPhraseExtractor",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.KeyPhraseExtractor",scala:"com/microsoft/azure/synapse/ml/cognitive/KeyPhraseExtractor.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1KeyPhraseExtractor.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextAnalytics.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"languagedetector"},"LanguageDetector"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ntextKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n  ("Hello World",),\n  ("Bonjour tout le monde",),\n  ("La carretera estaba atascada. Hab\xeda mucho tr\xe1fico el d\xeda de ayer.",),\n  ("\u4f60\u597d",),\n  ("\u3053\u3093\u306b\u3061\u306f",),\n  (":) :( :D",)\n], ["text",])\n\nlanguage = (LanguageDetector()\n            .setSubscriptionKey(textKey)\n            .setLocation("eastus")\n            .setTextCol("text")\n            .setOutputCol("language")\n            .setErrorCol("error"))\n\nlanguage.transform(df).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.text.LanguageDetector\nimport spark.implicits._\n\nval textKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n  "Hello World",\n  "Bonjour tout le monde",\n  "La carretera estaba atascada. Hab\xeda mucho tr\xe1fico el d\xeda de ayer.",\n  ":) :( :D"\n).toDF("text")\n\nval language = (new LanguageDetector()\n  .setSubscriptionKey(textKey)\n  .setLocation("eastus")\n  .setOutputCol("replies"))\n\nlanguage.transform(df).show()\n')))),(0,s.kt)(r.Z,{className:"LanguageDetector",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.LanguageDetector",scala:"com/microsoft/azure/synapse/ml/cognitive/LanguageDetector.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1LanguageDetector.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextAnalytics.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"ner"},"NER"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ntextKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n    ("1", "en", "I had a wonderful trip to Seattle last week."),\n    ("2", "en", "I visited Space Needle 2 times.")\n], ["id", "language", "text"])\n\nner = (NER()\n      .setSubscriptionKey(textKey)\n      .setLocation("eastus")\n      .setLanguageCol("language")\n      .setOutputCol("replies")\n      .setErrorCol("error"))\n\nner.transform(df).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.text.NER\nimport spark.implicits._\n\nval textKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n  ("1", "en", "I had a wonderful trip to Seattle last week."),\n  ("2", "en", "I visited Space Needle 2 times.")\n).toDF("id", "language", "text")\n\nval ner = (new NER()\n  .setSubscriptionKey(textKey)\n  .setLocation("eastus")\n  .setLanguage("en")\n  .setOutputCol("response"))\n\nner.transform(df).show()\n')))),(0,s.kt)(r.Z,{className:"NER",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.NER",scala:"com/microsoft/azure/synapse/ml/cognitive/NER.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1NER.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextAnalytics.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"pii"},"PII"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ntextKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n    ("1", "en", "My SSN is 859-98-0987"),\n    ("2", "en",\n      "Your ABA number - 111000025 - is the first 9 digits in the lower left hand corner of your personal check."),\n    ("3", "en", "Is 998.214.865-68 your Brazilian CPF number?")\n], ["id", "language", "text"])\n\npii = (PII()\n      .setSubscriptionKey(textKey)\n      .setLocation("eastus")\n      .setLanguage("en")\n      .setOutputCol("response"))\n\npii.transform(df).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.text.PII\nimport spark.implicits._\n\nval textKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n  ("1", "en", "My SSN is 859-98-0987"),\n  ("2", "en",\n    "Your ABA number - 111000025 - is the first 9 digits in the lower left hand corner of your personal check."),\n  ("3", "en", "Is 998.214.865-68 your Brazilian CPF number?")\n).toDF("id", "language", "text")\n\nval pii = (new PII()\n  .setSubscriptionKey(textKey)\n  .setLocation("eastus")\n  .setLanguage("en")\n  .setOutputCol("response"))\n\npii.transform(df).show()\n')))),(0,s.kt)(r.Z,{className:"PII",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.PII",scala:"com/microsoft/azure/synapse/ml/cognitive/PII.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1PII.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextAnalytics.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"textsentiment"},"TextSentiment"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ntextKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n  ("I am so happy today, its sunny!", "en-US"),\n  ("I am frustrated by this rush hour traffic", "en-US"),\n  ("The cognitive services on spark aint bad", "en-US"),\n], ["text", "language"])\n\nsentiment = (TextSentiment()\n            .setSubscriptionKey(textKey)\n            .setLocation("eastus")\n            .setTextCol("text")\n            .setOutputCol("sentiment")\n            .setErrorCol("error")\n            .setLanguageCol("language"))\n\nsentiment.transform(df).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.text.TextSentiment\nimport spark.implicits._\n\nval textKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n  ("en", "Hello world. This is some input text that I love."),\n  ("fr", "Bonjour tout le monde"),\n  ("es", "La carretera estaba atascada. Hab\xeda mucho tr\xe1fico el d\xeda de ayer."),\n  (null, "ich bin ein berliner"),\n  (null, null),\n  ("en", null)\n).toDF("lang", "text")\n\nval sentiment = (new TextSentiment()\n  .setSubscriptionKey(textKey)\n  .setLocation("eastus")\n  .setLanguageCol("lang")\n  .setModelVersion("latest")\n  .setShowStats(true)\n  .setOutputCol("replies"))\n\nsentiment.transform(df).show()\n')))),(0,s.kt)(r.Z,{className:"TextSentiment",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.TextSentiment",scala:"com/microsoft/azure/synapse/ml/cognitive/TextSentiment.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1TextSentiment.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextAnalytics.scala",mdxType:"DocTable"}))}m.isMDXComponent=!0;const p=[{value:"Translator",id:"translator",level:2},{value:"Translate",id:"translate",level:3},{value:"Transliterate",id:"transliterate",level:3},{value:"Detect",id:"detect",level:3},{value:"BreakSentence",id:"breaksentence",level:3},{value:"DictionaryLookup",id:"dictionarylookup",level:3},{value:"DictionaryExamples",id:"dictionaryexamples",level:3},{value:"DocumentTranslator",id:"documenttranslator",level:3}],u={toc:p};function y(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"translator"},"Translator"),(0,s.kt)("h3",{id:"translate"},"Translate"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ntranslatorKey = os.environ.get("TRANSLATOR_KEY", getSecret("translator-key"))\ndf = spark.createDataFrame([\n  (["Hello, what is your name?", "Bye"],)\n], ["text",])\n\ntranslate = (Translate()\n            .setSubscriptionKey(translatorKey)\n            .setLocation("eastus")\n            .setTextCol("text")\n            .setToLanguage(["zh-Hans", "fr"])\n            .setOutputCol("translation")\n            .setConcurrency(5))\n\n(translate\n      .transform(df)\n      .withColumn("translation", flatten(col("translation.translations")))\n      .withColumn("translation", col("translation.text"))\n      .select("translation")).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.translate.Translate\nimport spark.implicits._\nimport org.apache.spark.sql.functions.{col, flatten}\n\nval translatorKey = sys.env.getOrElse("TRANSLATOR_KEY", None)\nval df = Seq(List("Hello, what is your name?", "Bye")).toDF("text")\n\nval translate = (new Translate()\n  .setSubscriptionKey(translatorKey)\n  .setLocation("eastus")\n  .setTextCol("text")\n  .setToLanguage(Seq("zh-Hans", "fr"))\n  .setOutputCol("translation")\n  .setConcurrency(5))\n\n(translate\n  .transform(df)\n  .withColumn("translation", flatten(col("translation.translations")))\n  .withColumn("translation", col("translation.text"))\n  .select("translation")).show()\n')))),(0,s.kt)(r.Z,{className:"Translate",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.Translate",scala:"com/microsoft/azure/synapse/ml/cognitive/Translate.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1Translate.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextTranslator.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"transliterate"},"Transliterate"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ntranslatorKey = os.environ.get("TRANSLATOR_KEY", getSecret("translator-key"))\ndf =  spark.createDataFrame([\n  (["\u3053\u3093\u306b\u3061\u306f", "\u3055\u3088\u3046\u306a\u3089"],)\n], ["text",])\n\ntransliterate = (Transliterate()\n            .setSubscriptionKey(translatorKey)\n            .setLocation("eastus")\n            .setLanguage("ja")\n            .setFromScript("Jpan")\n            .setToScript("Latn")\n            .setTextCol("text")\n            .setOutputCol("result"))\n\n(transliterate\n    .transform(df)\n    .withColumn("text", col("result.text"))\n    .withColumn("script", col("result.script"))\n    .select("text", "script")).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.translate.Transliterate\nimport spark.implicits._\nimport org.apache.spark.sql.functions.col\n\nval translatorKey = sys.env.getOrElse("TRANSLATOR_KEY", None)\nval df = Seq(List("\u3053\u3093\u306b\u3061\u306f", "\u3055\u3088\u3046\u306a\u3089")).toDF("text")\n\nval transliterate = (new Transliterate()\n  .setSubscriptionKey(translatorKey)\n  .setLocation("eastus")\n  .setLanguage("ja")\n  .setFromScript("Jpan")\n  .setToScript("Latn")\n  .setTextCol("text")\n  .setOutputCol("result"))\n\n(transliterate\n  .transform(df)\n  .withColumn("text", col("result.text"))\n  .withColumn("script", col("result.script"))\n  .select("text", "script")).show()\n')))),(0,s.kt)(r.Z,{className:"Transliterate",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.Transliterate",scala:"com/microsoft/azure/synapse/ml/cognitive/Transliterate.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1Transliterate.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextTranslator.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"detect"},"Detect"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ntranslatorKey = os.environ.get("TRANSLATOR_KEY", getSecret("translator-key"))\ndf =  spark.createDataFrame([\n  (["Hello, what is your name?"],)\n], ["text",])\n\ndetect = (Detect()\n      .setSubscriptionKey(translatorKey)\n      .setLocation("eastus")\n      .setTextCol("text")\n      .setOutputCol("result"))\n\n(detect\n    .transform(df)\n    .withColumn("language", col("result.language"))\n    .select("language")).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.translate.Detect\nimport spark.implicits._\nimport org.apache.spark.sql.functions.col\n\nval translatorKey = sys.env.getOrElse("TRANSLATOR_KEY", None)\nval df = Seq(List("Hello, what is your name?")).toDF("text")\n\nval detect = (new Detect()\n  .setSubscriptionKey(translatorKey)\n  .setLocation("eastus")\n  .setTextCol("text")\n  .setOutputCol("result"))\n\n(detect\n  .transform(df)\n  .withColumn("language", col("result.language"))\n  .select("language")).show()\n')))),(0,s.kt)(r.Z,{className:"Detect",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.Detect",scala:"com/microsoft/azure/synapse/ml/cognitive/Detect.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1Detect.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextTranslator.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"breaksentence"},"BreakSentence"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ntranslatorKey = os.environ.get("TRANSLATOR_KEY", getSecret("translator-key"))\ndf =  spark.createDataFrame([\n  (["Hello, what is your name?"],)\n], ["text",])\n\nbreakSentence = (BreakSentence()\n            .setSubscriptionKey(translatorKey)\n            .setLocation("eastus")\n            .setTextCol("text")\n            .setOutputCol("result"))\n\n(breakSentence\n    .transform(df)\n    .withColumn("sentLen", flatten(col("result.sentLen")))\n    .select("sentLen")).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.translate.BreakSentence\nimport spark.implicits._\nimport org.apache.spark.sql.functions.{col, flatten}\n\nval translatorKey = sys.env.getOrElse("TRANSLATOR_KEY", None)\nval df = Seq(List("Hello, what is your name?")).toDF("text")\n\nval breakSentence = (new BreakSentence()\n  .setSubscriptionKey(translatorKey)\n  .setLocation("eastus")\n  .setTextCol("text")\n  .setOutputCol("result"))\n\n(breakSentence\n  .transform(df)\n  .withColumn("sentLen", flatten(col("result.sentLen")))\n  .select("sentLen")).show()\n')))),(0,s.kt)(r.Z,{className:"BreakSentence",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.BreakSentence",scala:"com/microsoft/azure/synapse/ml/cognitive/BreakSentence.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1BreakSentence.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextTranslator.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"dictionarylookup"},"DictionaryLookup"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ntranslatorKey = os.environ.get("TRANSLATOR_KEY", getSecret("translator-key"))\ndf = spark.createDataFrame([\n  (["fly"],)\n], ["text",])\n\ndictionaryLookup = (DictionaryLookup()\n                  .setSubscriptionKey(translatorKey)\n                  .setLocation("eastus")\n                  .setFromLanguage("en")\n                  .setToLanguage("es")\n                  .setTextCol("text")\n                  .setOutputCol("result"))\n\n(dictionaryLookup\n    .transform(df)\n    .withColumn("translations", flatten(col("result.translations")))\n    .withColumn("normalizedTarget", col("translations.normalizedTarget"))\n    .select("normalizedTarget")).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.translate.DictionaryLookup\nimport spark.implicits._\nimport org.apache.spark.sql.functions.{col, flatten}\n\nval translatorKey = sys.env.getOrElse("TRANSLATOR_KEY", None)\nval df = Seq(List("fly")).toDF("text")\n\nval dictionaryLookup = (new DictionaryLookup()\n  .setSubscriptionKey(translatorKey)\n  .setLocation("eastus")\n  .setFromLanguage("en")\n  .setToLanguage("es")\n  .setTextCol("text")\n  .setOutputCol("result"))\n\n(dictionaryLookup\n  .transform(df)\n  .withColumn("translations", flatten(col("result.translations")))\n  .withColumn("normalizedTarget", col("translations.normalizedTarget"))\n  .select("normalizedTarget")).show()\n')))),(0,s.kt)(r.Z,{className:"DictionaryLookup",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.DictionaryLookup",scala:"com/microsoft/azure/synapse/ml/cognitive/DictionaryLookup.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1DictionaryLookup.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextTranslator.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"dictionaryexamples"},"DictionaryExamples"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ntranslatorKey = os.environ.get("TRANSLATOR_KEY", getSecret("translator-key"))\ndf = (spark.createDataFrame([\n  ("fly", "volar")\n], ["text", "translation"])\n    .withColumn("textAndTranslation", array(struct(col("text"), col("translation")))))\n\ndictionaryExamples = (DictionaryExamples()\n                  .setSubscriptionKey(translatorKey)\n                  .setLocation("eastus")\n                  .setFromLanguage("en")\n                  .setToLanguage("es")\n                  .setTextAndTranslationCol("textAndTranslation")\n                  .setOutputCol("result"))\n\n(dictionaryExamples\n    .transform(df)\n    .withColumn("examples", flatten(col("result.examples")))\n    .select("examples")).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.translate.{DictionaryExamples, TextAndTranslation}\nimport spark.implicits._\nimport org.apache.spark.sql.functions.{col, flatten}\n\nval translatorKey = sys.env.getOrElse("TRANSLATOR_KEY", None)\nval df = Seq(List(TextAndTranslation("fly", "volar"))).toDF("textAndTranslation")\n\nval dictionaryExamples = (new DictionaryExamples()\n  .setSubscriptionKey(translatorKey)\n  .setLocation("eastus")\n  .setFromLanguage("en")\n  .setToLanguage("es")\n  .setTextAndTranslationCol("textAndTranslation")\n  .setOutputCol("result"))\n\n(dictionaryExamples\n  .transform(df)\n  .withColumn("examples", flatten(col("result.examples")))\n  .select("examples")).show()\n')))),(0,s.kt)(r.Z,{className:"DictionaryExamples",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.DictionaryExamples",scala:"com/microsoft/azure/synapse/ml/cognitive/DictionaryExamples.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1DictionaryExamples.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextTranslator.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"documenttranslator"},"DocumentTranslator"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ntranslatorKey = os.environ.get("TRANSLATOR_KEY", getSecret("translator-key"))\ntranslatorName = os.environ.get("TRANSLATOR_NAME", "mmlspark-translator")\n\ndocumentTranslator = (DocumentTranslator()\n                  .setSubscriptionKey(translatorKey)\n                  .setServiceName(translatorName)\n                  .setSourceUrlCol("sourceUrl")\n                  .setTargetsCol("targets")\n                  .setOutputCol("translationStatus"))\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.translate.DocumentTranslator\nimport spark.implicits._\n\nval translatorKey = sys.env.getOrElse("TRANSLATOR_KEY", None)\nval translatorName = sys.env.getOrElse("TRANSLATOR_NAME", None)\n\nval documentTranslator = (new DocumentTranslator()\n  .setSubscriptionKey(translatorKey)\n  .setServiceName(translatorName)\n  .setSourceUrlCol("sourceUrl")\n  .setTargetsCol("targets")\n  .setOutputCol("translationStatus"))\n')))),(0,s.kt)(r.Z,{className:"DocumentTranslator",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.DocumentTranslator",scala:"com/microsoft/azure/synapse/ml/cognitive/DocumentTranslator.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1DocumentTranslator.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/DocumentTranslator.scala",mdxType:"DocTable"}))}y.isMDXComponent=!0;const d=[{value:"Computer Vision",id:"computer-vision",level:2},{value:"OCR",id:"ocr",level:3},{value:"AnalyzeImage",id:"analyzeimage",level:3},{value:"RecognizeText",id:"recognizetext",level:3},{value:"ReadImage",id:"readimage",level:3},{value:"RecognizeDomainSpecificContent",id:"recognizedomainspecificcontent",level:3},{value:"GenerateThumbnails",id:"generatethumbnails",level:3},{value:"TagImage",id:"tagimage",level:3},{value:"DescribeImage",id:"describeimage",level:3}],g={toc:d};function v(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"computer-vision"},"Computer Vision"),(0,s.kt)("h3",{id:"ocr"},"OCR"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\n\ndf = spark.createDataFrame([\n        ("https://mmlspark.blob.core.windows.net/datasets/OCR/test1.jpg", ),\n    ], ["url", ])\n\nocr = (OCR()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setImageUrlCol("url")\n        .setDetectOrientation(True)\n        .setOutputCol("ocr"))\n\nocr.transform(df).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.vision.OCR\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n  "https://mmlspark.blob.core.windows.net/datasets/OCR/test1.jpg"\n).toDF("url")\n\n\nval ocr = (new OCR()\n  .setSubscriptionKey(cognitiveKey)\n  .setLocation("eastus")\n  .setImageUrlCol("url")\n  .setDetectOrientation(true)\n  .setOutputCol("ocr"))\n\nocr.transform(df).show()\n')))),(0,s.kt)(r.Z,{className:"OCR",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.OCR",scala:"com/microsoft/azure/synapse/ml/cognitive/OCR.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1OCR.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/ComputerVision.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"analyzeimage"},"AnalyzeImage"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n        ("https://mmlspark.blob.core.windows.net/datasets/OCR/test1.jpg", "en"),\n        ("https://mmlspark.blob.core.windows.net/datasets/OCR/test2.png", None),\n        ("https://mmlspark.blob.core.windows.net/datasets/OCR/test3.png", "en")\n    ], ["image", "language"])\n\n\nai = (AnalyzeImage()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setImageUrlCol("image")\n        .setLanguageCol("language")\n        .setVisualFeatures(["Categories", "Tags", "Description", "Faces", "ImageType", "Color", "Adult", "Objects", "Brands"])\n        .setDetails(["Celebrities", "Landmarks"])\n        .setOutputCol("features"))\n\nai.transform(df).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.vision.AnalyzeImage\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n  ("https://mmlspark.blob.core.windows.net/datasets/OCR/test1.jpg", "en"),\n  ("https://mmlspark.blob.core.windows.net/datasets/OCR/test2.png", null),\n  ("https://mmlspark.blob.core.windows.net/datasets/OCR/test3.png", "en")\n).toDF("url", "language")\n\nval ai = (new AnalyzeImage()\n  .setSubscriptionKey(cognitiveKey)\n  .setLocation("eastus")\n  .setImageUrlCol("url")\n  .setLanguageCol("language")\n  .setVisualFeatures(Seq("Categories", "Tags", "Description", "Faces", "ImageType", "Color", "Adult", "Objects", "Brands"))\n  .setDetails(Seq("Celebrities", "Landmarks"))\n  .setOutputCol("features"))\n\nai.transform(df).select("url", "features").show()\n')))),(0,s.kt)(r.Z,{className:"AnalyzeImage",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.AnalyzeImage",scala:"com/microsoft/azure/synapse/ml/cognitive/AnalyzeImage.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1AnalyzeImage.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/ComputerVision.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"recognizetext"},"RecognizeText"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n        ("https://mmlspark.blob.core.windows.net/datasets/OCR/test1.jpg", ),\n        ("https://mmlspark.blob.core.windows.net/datasets/OCR/test2.png", ),\n        ("https://mmlspark.blob.core.windows.net/datasets/OCR/test3.png", )\n    ], ["url", ])\n\nrt = (RecognizeText()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setImageUrlCol("url")\n        .setMode("Printed")\n        .setOutputCol("ocr")\n        .setConcurrency(5))\n\nrt.transform(df).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.vision.RecognizeText\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n  "https://mmlspark.blob.core.windows.net/datasets/OCR/test1.jpg",\n  "https://mmlspark.blob.core.windows.net/datasets/OCR/test2.png",\n  "https://mmlspark.blob.core.windows.net/datasets/OCR/test3.png"\n).toDF("url")\n\nval rt = (new RecognizeText()\n  .setSubscriptionKey(cognitiveKey)\n  .setLocation("eastus")\n  .setImageUrlCol("url")\n  .setMode("Printed")\n  .setOutputCol("ocr")\n  .setConcurrency(5))\n\nrt.transform(df).show()\n')))),(0,s.kt)(r.Z,{className:"RecognizeText",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.RecognizeText",scala:"com/microsoft/azure/synapse/ml/cognitive/RecognizeText.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1RecognizeText.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/ComputerVision.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"readimage"},"ReadImage"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n        ("https://mmlspark.blob.core.windows.net/datasets/OCR/test1.jpg", ),\n        ("https://mmlspark.blob.core.windows.net/datasets/OCR/test2.png", ),\n        ("https://mmlspark.blob.core.windows.net/datasets/OCR/test3.png", )\n    ], ["url", ])\n\nri = (ReadImage()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setImageUrlCol("url")\n    .setOutputCol("ocr")\n    .setConcurrency(5))\n\nri.transform(df).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.vision.ReadImage\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n  "https://mmlspark.blob.core.windows.net/datasets/OCR/test1.jpg",\n  "https://mmlspark.blob.core.windows.net/datasets/OCR/test2.png",\n  "https://mmlspark.blob.core.windows.net/datasets/OCR/test3.png"\n).toDF("url")\n\nval ri = (new ReadImage()\n  .setSubscriptionKey(cognitiveKey)\n  .setLocation("eastus")\n  .setImageUrlCol("url")\n  .setOutputCol("ocr")\n  .setConcurrency(5))\n\nri.transform(df).show()\n')))),(0,s.kt)(r.Z,{className:"ReadImage",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.ReadImage",scala:"com/microsoft/azure/synapse/ml/cognitive/ReadImage.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1ReadImage.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/ComputerVision.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"recognizedomainspecificcontent"},"RecognizeDomainSpecificContent"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n        ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg", )\n    ], ["url", ])\n\nceleb = (RecognizeDomainSpecificContent()\n        .setSubscriptionKey(cognitiveKey)\n        .setModel("celebrities")\n        .setLocation("eastus")\n        .setImageUrlCol("url")\n        .setOutputCol("celebs"))\n\nceleb.transform(df).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.vision.RecognizeDomainSpecificContent\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n  "https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg"\n).toDF("url")\n\nval celeb = (new RecognizeDomainSpecificContent()\n  .setSubscriptionKey(cognitiveKey)\n  .setModel("celebrities")\n  .setLocation("eastus")\n  .setImageUrlCol("url")\n  .setOutputCol("celebs"))\n\nceleb.transform(df).show()\n')))),(0,s.kt)(r.Z,{className:"RecognizeDomainSpecificContent",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.RecognizeDomainSpecificContent",scala:"com/microsoft/azure/synapse/ml/cognitive/RecognizeDomainSpecificContent.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1RecognizeDomainSpecificContent.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/ComputerVision.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"generatethumbnails"},"GenerateThumbnails"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n        ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg", )\n    ], ["url", ])\n\ngt = (GenerateThumbnails()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setHeight(50)\n        .setWidth(50)\n        .setSmartCropping(True)\n        .setImageUrlCol("url")\n        .setOutputCol("thumbnails"))\n\ngt.transform(df).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.vision.GenerateThumbnails\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df: DataFrame = Seq(\n  "https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg"\n).toDF("url")\n\nval gt = (new GenerateThumbnails()\n  .setSubscriptionKey(cognitiveKey)\n  .setLocation("eastus")\n  .setHeight(50)\n  .setWidth(50)\n  .setSmartCropping(true)\n  .setImageUrlCol("url")\n  .setOutputCol("thumbnails"))\n\ngt.transform(df).show()\n')))),(0,s.kt)(r.Z,{className:"GenerateThumbnails",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.GenerateThumbnails",scala:"com/microsoft/azure/synapse/ml/cognitive/GenerateThumbnails.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1GenerateThumbnails.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/ComputerVision.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"tagimage"},"TagImage"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n        ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg", )\n    ], ["url", ])\n\nti = (TagImage()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setImageUrlCol("url")\n        .setOutputCol("tags"))\n\nti.transform(df).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.vision.TagImage\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n  "https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg"\n).toDF("url")\n\nval ti = (new TagImage()\n  .setSubscriptionKey(cognitiveKey)\n  .setLocation("eastus")\n  .setImageUrlCol("url")\n  .setOutputCol("tags"))\n\nti.transform(df).show()\n')))),(0,s.kt)(r.Z,{className:"TagImage",py:"synapse.ml.cognitive.html#module-mmlspark.cognitive.TagImage",scala:"com/microsoft/azure/synapse/ml/cognitive/TagImage.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1TagImage.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/ComputerVision.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"describeimage"},"DescribeImage"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n        ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg", )\n    ], ["url", ])\n\ndi = (DescribeImage()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setMaxCandidates(3)\n        .setImageUrlCol("url")\n        .setOutputCol("descriptions"))\n\ndi.transform(df).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.vision.DescribeImage\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n  "https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg"\n).toDF("url")\n\nval di = (new DescribeImage()\n  .setSubscriptionKey(cognitiveKey)\n  .setLocation("eastus")\n  .setMaxCandidates(3)\n  .setImageUrlCol("url")\n  .setOutputCol("descriptions"))\n\ndi.transform(df).show()\n')))),(0,s.kt)(r.Z,{className:"DescribeImage",py:"synapse.ml.cognitive.html#module-mmlspark.cognitive.DescribeImage",scala:"com/microsoft/azure/synapse/ml/cognitive/DescribeImage.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1DescribeImage.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/ComputerVision.scala",mdxType:"DocTable"}))}v.isMDXComponent=!0;const f=[{value:"Form Recognizer",id:"form-recognizer",level:2},{value:"AnalyzeLayout",id:"analyzelayout",level:3},{value:"AnalyzeReceipts",id:"analyzereceipts",level:3},{value:"AnalyzeBusinessCards",id:"analyzebusinesscards",level:3},{value:"AnalyzeInvoices",id:"analyzeinvoices",level:3},{value:"AnalyzeIDDocuments",id:"analyzeiddocuments",level:3},{value:"AnalyzeCustomModel",id:"analyzecustommodel",level:3},{value:"GetCustomModel",id:"getcustommodel",level:3},{value:"ListCustomModels",id:"listcustommodels",level:3},{value:"Form Recognizer V3",id:"form-recognizer-v3",level:2},{value:"AnalyzeDocument",id:"analyzedocument",level:3}],h={toc:f};function b(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"form-recognizer"},"Form Recognizer"),(0,s.kt)("h3",{id:"analyzelayout"},"AnalyzeLayout"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nimageDf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/layout1.jpg",)\n], ["source",])\n\nanalyzeLayout = (AnalyzeLayout()\n            .setSubscriptionKey(cognitiveKey)\n            .setLocation("eastus")\n            .setImageUrlCol("source")\n            .setOutputCol("layout")\n            .setConcurrency(5))\n\n(analyzeLayout.transform(imageDf)\n        .withColumn("lines", flatten(col("layout.analyzeResult.readResults.lines")))\n        .withColumn("readLayout", col("lines.text"))\n        .withColumn("tables", flatten(col("layout.analyzeResult.pageResults.tables")))\n        .withColumn("cells", flatten(col("tables.cells")))\n        .withColumn("pageLayout", col("cells.text"))\n        .select("source", "readLayout", "pageLayout")).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.form.AnalyzeLayout\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval imageDf = Seq(\n  "https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/layout1.jpg"\n).toDF("source")\n\nval analyzeLayout = (new AnalyzeLayout()\n  .setSubscriptionKey(cognitiveKey)\n  .setLocation("eastus")\n  .setImageUrlCol("source")\n  .setOutputCol("layout")\n  .setConcurrency(5))\n\nanalyzeLayout.transform(imageDf).show()\n')))),(0,s.kt)(r.Z,{className:"AnalyzeLayout",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.AnalyzeLayout",scala:"com/microsoft/azure/synapse/ml/cognitive/AnalyzeLayout.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1AnalyzeLayout.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/FormRecognizer.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"analyzereceipts"},"AnalyzeReceipts"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nimageDf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/receipt1.png",),\n  ("https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/receipt1.png",)\n], ["image",])\n\nanalyzeReceipts = (AnalyzeReceipts()\n                  .setSubscriptionKey(cognitiveKey)\n                  .setLocation("eastus")\n                  .setImageUrlCol("image")\n                  .setOutputCol("receipts")\n                  .setConcurrency(5))\n\nanalyzeReceipts.transform(imageDf).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.form.AnalyzeReceipts\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval imageDf = Seq(\n  "https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/receipt1.png",\n  "https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/receipt1.png"\n).toDF("source")\n\nval analyzeReceipts = (new AnalyzeReceipts()\n  .setSubscriptionKey(cognitiveKey)\n  .setLocation("eastus")\n  .setImageUrlCol("source")\n  .setOutputCol("receipts")\n  .setConcurrency(5))\n\nanalyzeReceipts.transform(imageDf).show()\n')))),(0,s.kt)(r.Z,{className:"AnalyzeReceipts",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.AnalyzeReceipts",scala:"com/microsoft/azure/synapse/ml/cognitive/AnalyzeReceipts.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1AnalyzeReceipts.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/FormRecognizer.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"analyzebusinesscards"},"AnalyzeBusinessCards"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nimageDf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/business_card.jpg",)\n], ["source",])\n\nanalyzeBusinessCards = (AnalyzeBusinessCards()\n                        .setSubscriptionKey(cognitiveKey)\n                        .setLocation("eastus")\n                        .setImageUrlCol("source")\n                        .setOutputCol("businessCards")\n                        .setConcurrency(5))\n\nanalyzeBusinessCards.transform(imageDf).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.form.AnalyzeBusinessCards\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval imageDf = Seq(\n  "https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/business_card.jpg"\n).toDF("source")\n\nval analyzeBusinessCards = (new AnalyzeBusinessCards()\n  .setSubscriptionKey(cognitiveKey)\n  .setLocation("eastus")\n  .setImageUrlCol("source")\n  .setOutputCol("businessCards")\n  .setConcurrency(5))\n\nanalyzeBusinessCards.transform(imageDf).show()\n')))),(0,s.kt)(r.Z,{className:"AnalyzeBusinessCards",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.AnalyzeBusinessCards",scala:"com/microsoft/azure/synapse/ml/cognitive/AnalyzeBusinessCards.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1AnalyzeBusinessCards.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/FormRecognizer.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"analyzeinvoices"},"AnalyzeInvoices"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nimageDf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/invoice2.png",)\n], ["source",])\n\nanalyzeInvoices = (AnalyzeInvoices()\n                  .setSubscriptionKey(cognitiveKey)\n                  .setLocation("eastus")\n                  .setImageUrlCol("source")\n                  .setOutputCol("invoices")\n                  .setConcurrency(5))\n\n(analyzeInvoices\n        .transform(imageDf)\n        .withColumn("documents", explode(col("invoices.analyzeResult.documentResults.fields")))\n        .select("source", "documents")).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.form.AnalyzeInvoices\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval imageDf = Seq(\n  "https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/invoice2.png"\n).toDF("source")\n\nval analyzeInvoices = (new AnalyzeInvoices()\n  .setSubscriptionKey(cognitiveKey)\n  .setLocation("eastus")\n  .setImageUrlCol("source")\n  .setOutputCol("invoices")\n  .setConcurrency(5))\n\nanalyzeInvoices.transform(imageD4).show()\n')))),(0,s.kt)(r.Z,{className:"AnalyzeInvoices",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.AnalyzeInvoices",scala:"com/microsoft/azure/synapse/ml/cognitive/AnalyzeInvoices.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1AnalyzeInvoices.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/FormRecognizer.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"analyzeiddocuments"},"AnalyzeIDDocuments"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nimageDf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/id1.jpg",)\n], ["source",])\n\nanalyzeIDDocuments = (AnalyzeIDDocuments()\n                  .setSubscriptionKey(cognitiveKey)\n                  .setLocation("eastus")\n                  .setImageUrlCol("source")\n                  .setOutputCol("ids")\n                  .setConcurrency(5))\n\n(analyzeIDDocuments\n        .transform(imageDf)\n        .withColumn("documents", explode(col("ids.analyzeResult.documentResults.fields")))\n        .select("source", "documents")).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.form.AnalyzeIDDocuments\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval imageDf = Seq(\n  "https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/id1.jpg"\n).toDF("source")\n\nval analyzeIDDocuments = (new AnalyzeIDDocuments()\n  .setSubscriptionKey(cognitiveKey)\n  .setLocation("eastus")\n  .setImageUrlCol("source")\n  .setOutputCol("ids")\n  .setConcurrency(5))\n\nanalyzeIDDocuments.transform(imageDf).show()\n')))),(0,s.kt)(r.Z,{className:"AnalyzeIDDocuments",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.AnalyzeIDDocuments",scala:"com/microsoft/azure/synapse/ml/cognitive/AnalyzeIDDocuments.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1AnalyzeIDDocuments.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/FormRecognizer.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"analyzecustommodel"},"AnalyzeCustomModel"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nmodelId = "02bc2f58-2beb-4ae3-84fb-08f011b2f7b8" # put your own modelId here\nimageDf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/invoice2.png",)\n], ["source",])\n\nanalyzeCustomModel = (AnalyzeCustomModel()\n                 .setSubscriptionKey(cognitiveKey)\n                 .setLocation("eastus")\n                 .setModelId(modelId)\n                 .setImageUrlCol("source")\n                 .setOutputCol("output")\n                 .setConcurrency(5))\n\n(analyzeCustomModel\n        .transform(imageDf)\n        .withColumn("keyValuePairs", flatten(col("output.analyzeResult.pageResults.keyValuePairs")))\n        .withColumn("keys", col("keyValuePairs.key.text"))\n        .withColumn("values", col("keyValuePairs.value.text"))\n        .withColumn("keyValuePairs", create_map(lit("key"), col("keys"), lit("value"), col("values")))\n        .select("source", "keyValuePairs")).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.form.AnalyzeCustomModel\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval modelId = "02bc2f58-2beb-4ae3-84fb-08f011b2f7b8" // put your own modelId here\nval imageDf = Seq(\n  "https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/invoice2.png"\n).toDF("source")\n\nval analyzeCustomModel = (new AnalyzeCustomModel()\n  .setSubscriptionKey(cognitiveKey)\n  .setLocation("eastus")\n  .setModelId(modelId)\n  .setImageUrlCol("source")\n  .setOutputCol("output")\n  .setConcurrency(5))\n\nanalyzeCustomModel.transform(imageDf).show()\n')))),(0,s.kt)(r.Z,{className:"AnalyzeCustomModel",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.AnalyzeCustomModel",scala:"com/microsoft/azure/synapse/ml/cognitive/AnalyzeCustomModel.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1AnalyzeCustomModel.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/FormRecognizer.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"getcustommodel"},"GetCustomModel"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nmodelId = "02bc2f58-2beb-4ae3-84fb-08f011b2f7b8" # put your own modelId here\nemptyDf = spark.createDataFrame([("",)])\n\ngetCustomModel = (GetCustomModel()\n                  .setSubscriptionKey(cognitiveKey)\n                  .setLocation("eastus")\n                  .setModelId(modelId)\n                  .setIncludeKeys(True)\n                  .setOutputCol("model")\n                  .setConcurrency(5))\n\n(getCustomModel\n        .transform(emptyDf)\n        .withColumn("modelInfo", col("model.ModelInfo"))\n        .withColumn("trainResult", col("model.TrainResult"))\n        .select("modelInfo", "trainResult")).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.form.GetCustomModel\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval modelId = "02bc2f58-2beb-4ae3-84fb-08f011b2f7b8" // put your own modelId here\nval emptyDf = Seq("").toDF()\n\nval getCustomModel = (new GetCustomModel()\n  .setSubscriptionKey(cognitiveKey)\n  .setLocation("eastus")\n  .setModelId(modelId)\n  .setIncludeKeys(true)\n  .setOutputCol("model")\n  .setConcurrency(5))\n\ngetCustomModel.transform(emptyDf).show()\n')))),(0,s.kt)(r.Z,{className:"GetCustomModel",py:"synapse.ml.cognitive.html#module-mmlspark.cognitive.GetCustomModel",scala:"com/microsoft/azure/synapse/ml/cognitive/GetCustomModel.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1GetCustomModel.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/FormRecognizer.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"listcustommodels"},"ListCustomModels"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nemptyDf = spark.createDataFrame([("",)])\n\nlistCustomModels = (ListCustomModels()\n                  .setSubscriptionKey(cognitiveKey)\n                  .setLocation("eastus")\n                  .setOp("full")\n                  .setOutputCol("models")\n                  .setConcurrency(5))\n\n(listCustomModels\n       .transform(emptyDf)\n       .withColumn("modelIds", col("models.modelList.modelId"))\n       .select("modelIds")).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.form.ListCustomModels\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval emptyDf = Seq("").toDF()\n\nval listCustomModels = (new ListCustomModels()\n  .setSubscriptionKey(cognitiveKey)\n  .setLocation("eastus")\n  .setOp("full")\n  .setOutputCol("models")\n  .setConcurrency(5))\n\nlistCustomModels.transform(emptyDf).show()\n')))),(0,s.kt)(r.Z,{className:"ListCustomModels",py:"synapse.ml.cognitive.html#module-mmlspark.cognitive.ListCustomModels",scala:"com/microsoft/azure/synapse/ml/cognitive/ListCustomModels.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1ListCustomModels.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/FormRecognizer.scala",mdxType:"DocTable"}),(0,s.kt)("h2",{id:"form-recognizer-v3"},"Form Recognizer V3"),(0,s.kt)("h3",{id:"analyzedocument"},"AnalyzeDocument"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nimageDf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/layout1.jpg",)\n], ["source",])\n\nanalyzeDocument = (AnalyzeDocument()\n            # For supported prebuilt models, please go to documentation page for details\n            .setPrebuiltModelId("prebuilt-layout")\n            .setSubscriptionKey(cognitiveKey)\n            .setLocation("eastus")\n            .setImageUrlCol("source")\n            .setOutputCol("result")\n            .setConcurrency(5))\n\n(analyzeDocument.transform(imageDf)\n        .withColumn("content", col("result.analyzeResult.content"))\n        .withColumn("cells", flatten(col("result.analyzeResult.tables.cells")))\n        .withColumn("cells", col("cells.content"))\n        .select("source", "result", "content", "cells")).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.form.AnalyzeDocument\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval imageDf = Seq(\n  "https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/layout1.jpg"\n).toDF("source")\n\nval analyzeDocument = (new AnalyzeDocument()\n  .setPrebuiltModelId("prebuilt-layout")\n  .setSubscriptionKey(cognitiveKey)\n  .setLocation("eastus")\n  .setImageUrlCol("source")\n  .setOutputCol("result")\n  .setConcurrency(5))\n\nanalyzeDocument.transform(imageDf).show()\n')))),(0,s.kt)(r.Z,{className:"AnalyzeDocument",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.AnalyzeDocument",scala:"com/microsoft/azure/synapse/ml/cognitive/AnalyzeDocument.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1AnalyzeDocument.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/FormRecognizerV3.scala",mdxType:"DocTable"}))}b.isMDXComponent=!0;const T=[{value:"Anomaly Detection",id:"anomaly-detection",level:2},{value:"DetectLastAnomaly",id:"detectlastanomaly",level:3},{value:"DetectAnomalies",id:"detectanomalies",level:3},{value:"SimpleDetectAnomalies",id:"simpledetectanomalies",level:3}],k={toc:T};function I(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"anomaly-detection"},"Anomaly Detection"),(0,s.kt)("h3",{id:"detectlastanomaly"},"DetectLastAnomaly"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\nfrom pyspark.sql.functions import lit\n\nanomalyKey = os.environ.get("ANOMALY_API_KEY", getSecret("anomaly-api-key"))\ndf = (spark.createDataFrame([\n    ("1972-01-01T00:00:00Z", 826.0),\n    ("1972-02-01T00:00:00Z", 799.0),\n    ("1972-03-01T00:00:00Z", 890.0),\n    ("1972-04-01T00:00:00Z", 900.0),\n    ("1972-05-01T00:00:00Z", 766.0),\n    ("1972-06-01T00:00:00Z", 805.0),\n    ("1972-07-01T00:00:00Z", 821.0),\n    ("1972-08-01T00:00:00Z", 20000.0),\n    ("1972-09-01T00:00:00Z", 883.0),\n    ("1972-10-01T00:00:00Z", 898.0),\n    ("1972-11-01T00:00:00Z", 957.0),\n    ("1972-12-01T00:00:00Z", 924.0),\n    ("1973-01-01T00:00:00Z", 881.0),\n    ("1973-02-01T00:00:00Z", 837.0),\n    ("1973-03-01T00:00:00Z", 90000.0)\n], ["timestamp", "value"])\n      .withColumn("group", lit(1))\n      .withColumn("inputs", struct(col("timestamp"), col("value")))\n      .groupBy(col("group"))\n      .agg(sort_array(collect_list(col("inputs"))).alias("inputs")))\n\ndla = (DetectLastAnomaly()\n      .setSubscriptionKey(anomalyKey)\n      .setLocation("westus2")\n      .setOutputCol("anomalies")\n      .setSeriesCol("inputs")\n      .setGranularity("monthly")\n      .setErrorCol("errors"))\n\ndla.transform(df).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.anomaly.DetectLastAnomaly\nimport spark.implicits._\nimport org.apache.spark.sql.functions.{col, collect_list, lit, sort_array, struct}\n\nval anomalyKey = sys.env.getOrElse("ANOMALY_API_KEY", None)\nval df = (Seq(\n  ("1972-01-01T00:00:00Z", 826.0),\n  ("1972-02-01T00:00:00Z", 799.0),\n  ("1972-03-01T00:00:00Z", 890.0),\n  ("1972-04-01T00:00:00Z", 900.0),\n  ("1972-05-01T00:00:00Z", 766.0),\n  ("1972-06-01T00:00:00Z", 805.0),\n  ("1972-07-01T00:00:00Z", 821.0),\n  ("1972-08-01T00:00:00Z", 20000.0),\n  ("1972-09-01T00:00:00Z", 883.0),\n  ("1972-10-01T00:00:00Z", 898.0),\n  ("1972-11-01T00:00:00Z", 957.0),\n  ("1972-12-01T00:00:00Z", 924.0),\n  ("1973-01-01T00:00:00Z", 881.0),\n  ("1973-02-01T00:00:00Z", 837.0),\n  ("1973-03-01T00:00:00Z", 90000.0)\n).toDF("timestamp", "value")\n  .withColumn("group", lit(1))\n  .withColumn("inputs", struct(col("timestamp"), col("value")))\n  .groupBy(col("group"))\n  .agg(sort_array(collect_list(col("inputs"))).alias("inputs")))\n\nval dla = (new DetectLastAnomaly()\n  .setSubscriptionKey(anomalyKey)\n  .setLocation("westus2")\n  .setOutputCol("anomalies")\n  .setSeriesCol("inputs")\n  .setGranularity("monthly")\n  .setErrorCol("errors"))\n\ndla.transform(df).show()\n')))),(0,s.kt)(r.Z,{className:"DetectLastAnomaly",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.DetectLastAnomaly",scala:"com/microsoft/azure/synapse/ml/cognitive/DetectLastAnomaly.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1DetectLastAnomaly.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/AnomalyDetection.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"detectanomalies"},"DetectAnomalies"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\nanomalyKey = os.environ.get("ANOMALY_API_KEY", getSecret("anomaly-api-key"))\ndf = (spark.createDataFrame([\n    ("1972-01-01T00:00:00Z", 826.0),\n    ("1972-02-01T00:00:00Z", 799.0),\n    ("1972-03-01T00:00:00Z", 890.0),\n    ("1972-04-01T00:00:00Z", 900.0),\n    ("1972-05-01T00:00:00Z", 766.0),\n    ("1972-06-01T00:00:00Z", 805.0),\n    ("1972-07-01T00:00:00Z", 821.0),\n    ("1972-08-01T00:00:00Z", 20000.0),\n    ("1972-09-01T00:00:00Z", 883.0),\n    ("1972-10-01T00:00:00Z", 898.0),\n    ("1972-11-01T00:00:00Z", 957.0),\n    ("1972-12-01T00:00:00Z", 924.0),\n    ("1973-01-01T00:00:00Z", 881.0),\n    ("1973-02-01T00:00:00Z", 837.0),\n    ("1973-03-01T00:00:00Z", 90000.0)\n], ["timestamp", "value"])\n      .withColumn("group", lit(1))\n      .withColumn("inputs", struct(col("timestamp"), col("value")))\n      .groupBy(col("group"))\n      .agg(sort_array(collect_list(col("inputs"))).alias("inputs")))\n\nda = (DetectAnomalies()\n      .setSubscriptionKey(anomalyKey)\n      .setLocation("westus2")\n      .setOutputCol("anomalies")\n      .setSeriesCol("inputs")\n      .setGranularity("monthly"))\n\nda.transform(df).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.anomaly.DetectAnomalies\nimport spark.implicits._\n\nval anomalyKey = sys.env.getOrElse("ANOMALY_API_KEY", None)\nval df = (Seq(\n  ("1972-01-01T00:00:00Z", 826.0),\n  ("1972-02-01T00:00:00Z", 799.0),\n  ("1972-03-01T00:00:00Z", 890.0),\n  ("1972-04-01T00:00:00Z", 900.0),\n  ("1972-05-01T00:00:00Z", 766.0),\n  ("1972-06-01T00:00:00Z", 805.0),\n  ("1972-07-01T00:00:00Z", 821.0),\n  ("1972-08-01T00:00:00Z", 20000.0),\n  ("1972-09-01T00:00:00Z", 883.0),\n  ("1972-10-01T00:00:00Z", 898.0),\n  ("1972-11-01T00:00:00Z", 957.0),\n  ("1972-12-01T00:00:00Z", 924.0),\n  ("1973-01-01T00:00:00Z", 881.0),\n  ("1973-02-01T00:00:00Z", 837.0),\n  ("1973-03-01T00:00:00Z", 90000.0)\n).toDF("timestamp", "value")\n  .withColumn("group", lit(1))\n  .withColumn("inputs", struct(col("timestamp"), col("value")))\n  .groupBy(col("group"))\n  .agg(sort_array(collect_list(col("inputs"))).alias("inputs")))\n\nval da = (new DetectAnomalies()\n  .setSubscriptionKey(anomalyKey)\n  .setLocation("westus2")\n  .setOutputCol("anomalies")\n  .setSeriesCol("inputs")\n  .setGranularity("monthly"))\n\nda.transform(df).show()\n')))),(0,s.kt)(r.Z,{className:"DetectAnomalies",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.DetectAnomalies",scala:"com/microsoft/azure/synapse/ml/cognitive/DetectAnomalies.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1DetectAnomalies.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/AnomalyDetection.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"simpledetectanomalies"},"SimpleDetectAnomalies"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\nanomalyKey = os.environ.get("ANOMALY_API_KEY", getSecret("anomaly-api-key"))\ndf = (spark.createDataFrame([\n    ("1972-01-01T00:00:00Z", 826.0, 1.0),\n    ("1972-02-01T00:00:00Z", 799.0, 1.0),\n    ("1972-03-01T00:00:00Z", 890.0, 1.0),\n    ("1972-04-01T00:00:00Z", 900.0, 1.0),\n    ("1972-05-01T00:00:00Z", 766.0, 1.0),\n    ("1972-06-01T00:00:00Z", 805.0, 1.0),\n    ("1972-07-01T00:00:00Z", 821.0, 1.0),\n    ("1972-08-01T00:00:00Z", 20000.0, 1.0),\n    ("1972-09-01T00:00:00Z", 883.0, 1.0),\n    ("1972-10-01T00:00:00Z", 898.0, 1.0),\n    ("1972-11-01T00:00:00Z", 957.0, 1.0),\n    ("1972-12-01T00:00:00Z", 924.0, 1.0),\n    ("1973-01-01T00:00:00Z", 881.0, 1.0),\n    ("1973-02-01T00:00:00Z", 837.0, 1.0),\n    ("1973-03-01T00:00:00Z", 90000.0, 1.0),\n    ("1972-01-01T00:00:00Z", 826.0, 2.0),\n    ("1972-02-01T00:00:00Z", 799.0, 2.0),\n    ("1972-03-01T00:00:00Z", 890.0, 2.0),\n    ("1972-04-01T00:00:00Z", 900.0, 2.0),\n    ("1972-05-01T00:00:00Z", 766.0, 2.0),\n    ("1972-06-01T00:00:00Z", 805.0, 2.0),\n    ("1972-07-01T00:00:00Z", 821.0, 2.0),\n    ("1972-08-01T00:00:00Z", 20000.0, 2.0),\n    ("1972-09-01T00:00:00Z", 883.0, 2.0),\n    ("1972-10-01T00:00:00Z", 898.0, 2.0),\n    ("1972-11-01T00:00:00Z", 957.0, 2.0),\n    ("1972-12-01T00:00:00Z", 924.0, 2.0),\n    ("1973-01-01T00:00:00Z", 881.0, 2.0),\n    ("1973-02-01T00:00:00Z", 837.0, 2.0),\n    ("1973-03-01T00:00:00Z", 90000.0, 2.0)\n], ["timestamp", "value", "group"]))\n\nsda = (SimpleDetectAnomalies()\n        .setSubscriptionKey(anomalyKey)\n        .setLocation("westus2")\n        .setOutputCol("anomalies")\n        .setGroupbyCol("group")\n        .setGranularity("monthly"))\n\nsda.transform(df).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.anomaly.SimpleDetectAnomalies\nimport spark.implicits._\n\nval anomalyKey = sys.env.getOrElse("ANOMALY_API_KEY", None)\nval baseSeq = Seq(\n  ("1972-01-01T00:00:00Z", 826.0),\n  ("1972-02-01T00:00:00Z", 799.0),\n  ("1972-03-01T00:00:00Z", 890.0),\n  ("1972-04-01T00:00:00Z", 900.0),\n  ("1972-05-01T00:00:00Z", 766.0),\n  ("1972-06-01T00:00:00Z", 805.0),\n  ("1972-07-01T00:00:00Z", 821.0),\n  ("1972-08-01T00:00:00Z", 20000.0),\n  ("1972-09-01T00:00:00Z", 883.0),\n  ("1972-10-01T00:00:00Z", 898.0),\n  ("1972-11-01T00:00:00Z", 957.0),\n  ("1972-12-01T00:00:00Z", 924.0),\n  ("1973-01-01T00:00:00Z", 881.0),\n  ("1973-02-01T00:00:00Z", 837.0),\n  ("1973-03-01T00:00:00Z", 9000.0)\n)\nval df = (baseSeq.map(p => (p._1, p._2, 1.0))\n  .++(baseSeq.map(p => (p._1, p._2, 2.0)))\n  .toDF("timestamp", "value", "group"))\n\nval sda = (new SimpleDetectAnomalies()\n  .setSubscriptionKey(anomalyKey)\n  .setLocation("westus2")\n  .setOutputCol("anomalies")\n  .setGroupbyCol("group")\n  .setGranularity("monthly"))\n\nsda.transform(df).show()\n')))),(0,s.kt)(r.Z,{className:"SimpleDetectAnomalies",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.SimpleDetectAnomalies",scala:"com/microsoft/azure/synapse/ml/cognitive/SimpleDetectAnomalies.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1SimpleDetectAnomalies.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/AnomalyDetection.scala",mdxType:"DocTable"}))}I.isMDXComponent=!0;const S=[{value:"Face",id:"face",level:2},{value:"DetectFace",id:"detectface",level:3},{value:"FindSimilarFace",id:"findsimilarface",level:3},{value:"GroupFaces",id:"groupfaces",level:3},{value:"IdentifyFaces",id:"identifyfaces",level:3},{value:"VerifyFaces",id:"verifyfaces",level:3}],_={toc:S};function C(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},_,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"face"},"Face"),(0,s.kt)("h3",{id:"detectface"},"DetectFace"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg",),\n], ["url"])\n\nface = (DetectFace()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setImageUrlCol("url")\n    .setOutputCol("detected_faces")\n    .setReturnFaceId(True)\n    .setReturnFaceLandmarks(False)\n    .setReturnFaceAttributes(["age", "gender", "headPose", "smile", "facialHair", "glasses", "emotion",\n      "hair", "makeup", "occlusion", "accessories", "blur", "exposure", "noise"]))\n\nface.transform(df).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.face.DetectFace\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df: DataFrame = Seq(\n  "https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg"\n).toDF("url")\n\nval face = (new DetectFace()\n  .setSubscriptionKey(cognitiveKey)\n  .setLocation("eastus")\n  .setImageUrlCol("url")\n  .setOutputCol("face")\n  .setReturnFaceId(true)\n  .setReturnFaceLandmarks(true)\n  .setReturnFaceAttributes(Seq(\n    "age", "gender", "headPose", "smile", "facialHair", "glasses", "emotion",\n    "hair", "makeup", "occlusion", "accessories", "blur", "exposure", "noise")))\n\nface.transform(df).show()\n')))),(0,s.kt)(r.Z,{className:"DetectFace",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.DetectFace",scala:"com/microsoft/azure/synapse/ml/cognitive/DetectFace.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1DetectFace.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/Face.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"findsimilarface"},"FindSimilarFace"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg",),\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg",),\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test3.jpg",)\n], ["url"])\n\ndetector = (DetectFace()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setImageUrlCol("url")\n    .setOutputCol("detected_faces")\n    .setReturnFaceId(True)\n    .setReturnFaceLandmarks(False)\n    .setReturnFaceAttributes([]))\n\nfaceIdDF = detector.transform(df).select("detected_faces").select(col("detected_faces").getItem(0).getItem("faceId").alias("id"))\nfaceIds = [row.asDict()[\'id\'] for row in faceIdDF.collect()]\n\nfindSimilar = (FindSimilarFace()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setOutputCol("similar")\n    .setFaceIdCol("id")\n    .setFaceIds(faceIds))\n\nfindSimilar.transform(faceIdDF).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.face.{DetectFace, FindSimilarFace}\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df: DataFrame = Seq(\n  "https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg",\n  "https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg",\n  "https://mmlspark.blob.core.windows.net/datasets/DSIR/test3.jpg"\n).toDF("url")\nval detector = (new DetectFace()\n  .setSubscriptionKey(cognitiveKey)\n  .setLocation("eastus")\n  .setImageUrlCol("url")\n  .setOutputCol("detected_faces")\n  .setReturnFaceId(true)\n  .setReturnFaceLandmarks(false)\n  .setReturnFaceAttributes(Seq()))\n\nval faceIdDF = (detector.transform(df)\n  .select(col("detected_faces").getItem(0).getItem("faceId").alias("id"))\n  .cache())\nval faceIds = faceIdDF.collect().map(row => row.getAs[String]("id"))\n\nval findSimilar = (new FindSimilarFace()\n  .setSubscriptionKey(cognitiveKey)\n  .setLocation("eastus")\n  .setOutputCol("similar")\n  .setFaceIdCol("id")\n  .setFaceIds(faceIds))\n\nfindSimilar.transform(faceIdDF).show()\n')))),(0,s.kt)(r.Z,{className:"FindSimilarFace",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.FindSimilarFace",scala:"com/microsoft/azure/synapse/ml/cognitive/FindSimilarFace.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1FindSimilarFace.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/Face.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"groupfaces"},"GroupFaces"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg",),\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg",),\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test3.jpg",)\n], ["url"])\n\ndetector = (DetectFace()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setImageUrlCol("url")\n    .setOutputCol("detected_faces")\n    .setReturnFaceId(True)\n    .setReturnFaceLandmarks(False)\n    .setReturnFaceAttributes([]))\n\nfaceIdDF = detector.transform(df).select("detected_faces").select(col("detected_faces").getItem(0).getItem("faceId").alias("id"))\nfaceIds = [row.asDict()[\'id\'] for row in faceIdDF.collect()]\n\ngroup = (GroupFaces()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setOutputCol("grouping")\n    .setFaceIds(faceIds))\n\ngroup.transform(faceIdDF).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.face.{DetectFace, GroupFaces}\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df: DataFrame = Seq(\n  "https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg",\n  "https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg",\n  "https://mmlspark.blob.core.windows.net/datasets/DSIR/test3.jpg"\n).toDF("url")\nval detector = (new DetectFace()\n  .setSubscriptionKey(cognitiveKey)\n  .setLocation("eastus")\n  .setImageUrlCol("url")\n  .setOutputCol("detected_faces")\n  .setReturnFaceId(true)\n  .setReturnFaceLandmarks(false)\n  .setReturnFaceAttributes(Seq()))\n\nval faceIdDF = (detector.transform(df)\n  .select(col("detected_faces").getItem(0).getItem("faceId").alias("id"))\n  .cache())\nval faceIds = faceIdDF.collect().map(row => row.getAs[String]("id"))\n\nval group = (new GroupFaces()\n  .setSubscriptionKey(cognitiveKey)\n  .setLocation("eastus")\n  .setOutputCol("grouping")\n  .setFaceIds(faceIds))\n\ngroup.transform(faceIdDF).show()\n')))),(0,s.kt)(r.Z,{className:"GroupFaces",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.GroupFaces",scala:"com/microsoft/azure/synapse/ml/cognitive/GroupFaces.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1GroupFaces.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/Face.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"identifyfaces"},"IdentifyFaces"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\npgId = "PUT_YOUR_PERSON_GROUP_ID"\n\nidentifyFaces = (IdentifyFaces()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setFaceIdsCol("faces")\n    .setPersonGroupId(pgId)\n    .setOutputCol("identified_faces"))\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.face.IdentifyFaces\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval pgId = "PUT_YOUR_PERSON_GROUP_ID"\n\nval identifyFaces = (new IdentifyFaces()\n  .setSubscriptionKey(cognitiveKey)\n  .setLocation("eastus")\n  .setFaceIdsCol("faces")\n  .setPersonGroupId(pgId)\n  .setOutputCol("identified_faces"))\n')))),(0,s.kt)(r.Z,{className:"IdentifyFaces",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.IdentifyFaces",scala:"com/microsoft/azure/synapse/ml/cognitive/IdentifyFaces.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1IdentifyFaces.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/Face.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"verifyfaces"},"VerifyFaces"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg",),\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg",),\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test3.jpg",)\n], ["url"])\n\ndetector = (DetectFace()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setImageUrlCol("url")\n    .setOutputCol("detected_faces")\n    .setReturnFaceId(True)\n    .setReturnFaceLandmarks(False)\n    .setReturnFaceAttributes([]))\n\nfaceIdDF = detector.transform(df).select("detected_faces").select(col("detected_faces").getItem(0).getItem("faceId").alias("faceId1"))\nfaceIdDF2 = faceIdDF.withColumn("faceId2", lit(faceIdDF.take(1)[0].asDict()[\'faceId1\']))\n\nverify = (VerifyFaces()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setOutputCol("same")\n    .setFaceId1Col("faceId1")\n    .setFaceId2Col("faceId2"))\n\nverify.transform(faceIdDF2).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.face.{DetectFace, VerifyFaces}\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df: DataFrame = Seq(\n  "https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg",\n  "https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg",\n  "https://mmlspark.blob.core.windows.net/datasets/DSIR/test3.jpg"\n).toDF("url")\n\nval detector = (new DetectFace()\n  .setSubscriptionKey(cognitiveKey)\n  .setLocation("eastus")\n  .setImageUrlCol("url")\n  .setOutputCol("detected_faces")\n  .setReturnFaceId(true)\n  .setReturnFaceLandmarks(false)\n  .setReturnFaceAttributes(Seq()))\n\nval faceIdDF = (detector.transform(df)\n  .select(col("detected_faces").getItem(0).getItem("faceId").alias("faceId1"))\n  .cache())\nval faceIdDF2 = faceIdDF.withColumn("faceId2", lit(faceIdDF.take(1).head.getString(0)))\n\nval verify = (new VerifyFaces()\n  .setSubscriptionKey(cognitiveKey)\n  .setLocation("eastus")\n  .setOutputCol("same")\n  .setFaceId1Col("faceId1")\n  .setFaceId2Col("faceId2"))\n\nverify.transform(faceIdDF2).show()\n')))),(0,s.kt)(r.Z,{className:"VerifyFaces",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.VerifyFaces",scala:"com/microsoft/azure/synapse/ml/cognitive/VerifyFaces.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1VerifyFaces.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/Face.scala",mdxType:"DocTable"}))}C.isMDXComponent=!0;const x=[{value:"Speech To Text",id:"speech-to-text",level:2},{value:"SpeechToText",id:"speechtotext",level:3},{value:"SpeechToTextSDK",id:"speechtotextsdk",level:3}],D={toc:x};function w(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},D,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"speech-to-text"},"Speech To Text"),(0,s.kt)("h3",{id:"speechtotext"},"SpeechToText"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\nimport requests\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nlink = "https://mmlspark.blob.core.windows.net/datasets/Speech/audio2.wav"\naudioBytes = requests.get(link).content\ndf = spark.createDataFrame([(audioBytes,)\n                           ], ["audio"])\n\nstt = (SpeechToText()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setOutputCol("text")\n    .setAudioDataCol("audio")\n    .setLanguage("en-US")\n    .setFormat("simple"))\n\nstt.transform(df).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.speech.SpeechToText\nimport org.apache.commons.compress.utils.IOUtils\nimport spark.implicits._\nimport java.net.URL\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval audioBytes = IOUtils.toByteArray(new URL("https://mmlspark.blob.core.windows.net/datasets/Speech/test1.wav").openStream())\n\nval df: DataFrame = Seq(\n  Tuple1(audioBytes)\n).toDF("audio")\n\nval stt = (new SpeechToText()\n  .setSubscriptionKey(cognitiveKey)\n  .setLocation("eastus")\n  .setOutputCol("text")\n  .setAudioDataCol("audio")\n  .setLanguage("en-US")\n  .setFormat("simple"))\n\nstt.transform(df).show()\n')))),(0,s.kt)(r.Z,{className:"SpeechToText",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.SpeechToText",scala:"com/microsoft/azure/synapse/ml/cognitive/SpeechToText.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1SpeechToText.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/SpeechToText.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"speechtotextsdk"},"SpeechToTextSDK"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\nimport requests\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([("https://mmlspark.blob.core.windows.net/datasets/Speech/audio2.wav",)\n                           ], ["url"])\n\nspeech_to_text = (SpeechToTextSDK()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setOutputCol("text")\n    .setAudioDataCol("url")\n    .setLanguage("en-US")\n    .setProfanity("Masked"))\n\nspeech_to_text.transform(df).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.speech.SpeechToTextSDK\nimport spark.implicits._\nimport org.apache.commons.compress.utils.IOUtils\nimport java.net.URL\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df: DataFrame = Seq(\n  "https://mmlspark.blob.core.windows.net/datasets/Speech/audio2.wav"\n).toDF("url")\n\nval speech_to_text = (new SpeechToTextSDK()\n  .setSubscriptionKey(cognitiveKey)\n  .setLocation("eastus")\n  .setOutputCol("text")\n  .setAudioDataCol("url")\n  .setLanguage("en-US")\n  .setProfanity("Masked"))\n\nspeech_to_text.transform(df).show()\n')))),(0,s.kt)(r.Z,{className:"SpeechToTextSDK",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.SpeechToTextSDK",scala:"com/microsoft/azure/synapse/ml/cognitive/SpeechToTextSDK.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1SpeechToTextSDK.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/SpeechToTextSDK.scala",mdxType:"DocTable"}))}w.isMDXComponent=!0;const N=[{value:"Azure Search",id:"azure-search",level:2},{value:"AzureSearch",id:"azuresearch",level:3}],K={toc:N};function L(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},K,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"azure-search"},"Azure Search"),(0,s.kt)("h3",{id:"azuresearch"},"AzureSearch"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\nazureSearchKey = os.environ.get("AZURE_SEARCH_KEY", getSecret("azure-search-key"))\ntestServiceName = "mmlspark-azure-search"\n\nindexName = "test-website"\n\ndef createSimpleIndexJson(indexName):\n    json_str = """\n       {\n           "name": "%s",\n           "fields": [\n               {\n                   "name": "id",\n                   "type": "Edm.String",\n                   "key": true,\n                   "facetable": false\n                },\n                {\n                    "name": "fileName",\n                    "type": "Edm.String",\n                    "searchable": false,\n                    "sortable": false,\n                    "facetable": false\n                },\n                {\n                    "name": "text",\n                    "type": "Edm.String",\n                    "filterable": false,\n                    "sortable": false,\n                    "facetable": false\n                }\n            ]\n        }\n    """\n\n    return json_str % indexName\n\ndf = (spark.createDataFrame([\n    ("upload", "0", "file0", "text0"),\n    ("upload", "1", "file1", "text1"),\n    ("upload", "2", "file2", "text2"),\n    ("upload", "3", "file3", "text3")\n], ["searchAction", "id", "fileName", "text"]))\n\nad = (AddDocuments()\n      .setSubscriptionKey(azureSearchKey)\n      .setServiceName(testServiceName)\n      .setOutputCol("out")\n      .setErrorCol("err")\n      .setIndexName(indexName)\n      .setActionCol("searchAction"))\n\nad.transform(df).show()\n\nAzureSearchWriter.writeToAzureSearch(df,\n    subscriptionKey=azureSearchKey,\n    actionCol="searchAction",\n    serviceName=testServiceName,\n    indexJson=createSimpleIndexJson(indexName))\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.search.{AddDocuments, AzureSearchWriter}\nimport spark.implicits._\n\nval azureSearchKey = sys.env.getOrElse("AZURE_SEARCH_KEY", None)\nval testServiceName = "mmlspark-azure-search"\n\nval indexName = "test-website"\n\ndef createSimpleIndexJson(indexName: String) = {\n  s"""\n     |{\n     |    "name": "$indexName",\n     |    "fields": [\n     |      {\n     |        "name": "id",\n     |        "type": "Edm.String",\n     |        "key": true,\n     |        "facetable": false\n     |      },\n     |    {\n     |      "name": "fileName",\n     |      "type": "Edm.String",\n     |      "searchable": false,\n     |      "sortable": false,\n     |      "facetable": false\n     |    },\n     |    {\n     |      "name": "text",\n     |      "type": "Edm.String",\n     |      "filterable": false,\n     |      "sortable": false,\n     |      "facetable": false\n     |    }\n     |    ]\n     |  }\n    """.stripMargin\n}\n\nval df = ((0 until 4)\n  .map(i => ("upload", s"$i", s"file$i", s"text$i"))\n  .toDF("searchAction", "id", "fileName", "text"))\n\nval ad = (new AddDocuments()\n  .setSubscriptionKey(azureSearchKey)\n  .setServiceName(testServiceName)\n  .setOutputCol("out")\n  .setErrorCol("err")\n  .setIndexName(indexName)\n  .setActionCol("searchAction"))\n\nad.transform(df).show()\n\nAzureSearchWriter.write(df,\n  Map("subscriptionKey" -> azureSearchKey,\n    "actionCol" -> "searchAction",\n    "serviceName" -> testServiceName,\n    "indexJson" -> createSimpleIndexJson(indexName)))\n')))),(0,s.kt)(r.Z,{className:"AzureSearch",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.AzureSearch",scala:"com/microsoft/azure/synapse/ml/cognitive/AzureSearch.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1AddDocuments.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/AzureSearch.scala",mdxType:"DocTable"}))}L.isMDXComponent=!0;const z=[{value:"Bing Image Search",id:"bing-image-search",level:2},{value:"BingImageSearch",id:"bingimagesearch",level:3}],E={toc:z};function Z(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},E,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"bing-image-search"},"Bing Image Search"),(0,s.kt)("h3",{id:"bingimagesearch"},"BingImageSearch"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.services import *\n\nbingSearchKey = os.environ.get("BING_SEARCH_KEY", getSecret("bing-search-key"))\n\n# Number of images Bing will return per query\nimgsPerBatch = 10\n# A list of offsets, used to page into the search results\noffsets = [(i*imgsPerBatch,) for i in range(100)]\n# Since web content is our data, we create a dataframe with options on that data: offsets\nbingParameters = spark.createDataFrame(offsets, ["offset"])\n\n# Run the Bing Image Search service with our text query\nbingSearch = (BingImageSearch()\n              .setSubscriptionKey(bingSearchKey)\n              .setOffsetCol("offset")\n              .setQuery("Martin Luther King Jr. quotes")\n              .setCount(imgsPerBatch)\n              .setOutputCol("images"))\n\n# Transformer that extracts and flattens the richly structured output of Bing Image Search into a simple URL column\ngetUrls = BingImageSearch.getUrlTransformer("images", "url")\n\n# This displays the full results returned\nbingSearch.transform(bingParameters).show()\n\n# Since we have two services, they are put into a pipeline\npipeline = PipelineModel(stages=[bingSearch, getUrls])\n\n# Show the results of your search: image URLs\npipeline.transform(bingParameters).show()\n\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.services.bing.BingImageSearch\nimport spark.implicits._\n\nval bingSearchKey = sys.env.getOrElse("BING_SEARCH_KEY", None)\n\n// Number of images Bing will return per query\nval imgsPerBatch = 10\n// A list of offsets, used to page into the search results\nval offsets = (0 until 100).map(i => i * imgsPerBatch)\n// Since web content is our data, we create a dataframe with options on that data: offsets\nval bingParameters = Seq(offsets).toDF("offset")\n\n// Run the Bing Image Search service with our text query\nval bingSearch = (new BingImageSearch()\n  .setSubscriptionKey(bingSearchKey)\n  .setOffsetCol("offset")\n  .setQuery("Martin Luther King Jr. quotes")\n  .setCount(imgsPerBatch)\n  .setOutputCol("images"))\n\n// Transformer that extracts and flattens the richly structured output of Bing Image Search into a simple URL column\nval getUrls = BingImageSearch.getUrlTransformer("images", "url")\n\n// This displays the full results returned\nbingSearch.transform(bingParameters).show()\n\n// Show the results of your search: image URLs\ngetUrls.transform(bingSearch.transform(bingParameters)).show()\n')))),(0,s.kt)(r.Z,{className:"BingImageSearch",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.BingImageSearch",scala:"com/microsoft/azure/synapse/ml/cognitive/BingImageSearch.html",csharp:"classSynapse_1_1ML_1_1Cognitive_1_1BingImageSearch.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/BingImageSearch.scala",mdxType:"DocTable"}))}Z.isMDXComponent=!0;const A={title:"Transformers - Cognitive",sidebar_label:"Cognitive",hide_title:!0},O=void 0,F={unversionedId:"Quick Examples/transformers/transformers_cognitive",id:"version-1.0.10/Quick Examples/transformers/transformers_cognitive",title:"Transformers - Cognitive",description:"",source:"@site/versioned_docs/version-1.0.10/Quick Examples/transformers/transformers_cognitive.md",sourceDirName:"Quick Examples/transformers",slug:"/Quick Examples/transformers/transformers_cognitive",permalink:"/SynapseML/docs/1.0.10/Quick Examples/transformers/transformers_cognitive",draft:!1,tags:[],version:"1.0.10",frontMatter:{title:"Transformers - Cognitive",sidebar_label:"Cognitive",hide_title:!0}},R={},P=[...i,...p,...d,...f,...T,...S,...x,...N,...z],M={toc:P};function V(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},M,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)(m,{mdxType:"TextAnalytics"}),(0,s.kt)(y,{mdxType:"Translator"}),(0,s.kt)(v,{mdxType:"ComputerVision"}),(0,s.kt)(b,{mdxType:"FormRecognizer"}),(0,s.kt)(I,{mdxType:"AnomalyDetection"}),(0,s.kt)(C,{mdxType:"Face"}),(0,s.kt)(w,{mdxType:"SpeechToText"}),(0,s.kt)(L,{mdxType:"AzureSearch"}),(0,s.kt)(Z,{mdxType:"BingImageSearch"}))}V.isMDXComponent=!0}}]);