"use strict";(self.webpackChunksynapseml=self.webpackChunksynapseml||[]).push([[85363],{3905:(e,a,t)=>{t.d(a,{Zo:()=>u,kt:()=>d});var s=t(67294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);a&&(s=s.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,s)}return t}function r(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,s,n=function(e,a){if(null==e)return{};var t,s,n={},l=Object.keys(e);for(s=0;s<l.length;s++)t=l[s],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(s=0;s<l.length;s++)t=l[s],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var m=s.createContext({}),p=function(e){var a=s.useContext(m),t=a;return e&&(t="function"==typeof e?e(a):r(r({},a),e)),t},u=function(e){var a=p(e.components);return s.createElement(m.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return s.createElement(s.Fragment,{},a)}},i=s.forwardRef((function(e,a){var t=e.components,n=e.mdxType,l=e.originalType,m=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),i=p(t),d=n,y=i["".concat(m,".").concat(d)]||i[d]||c[d]||l;return t?s.createElement(y,r(r({ref:a},u),{},{components:t})):s.createElement(y,r({ref:a},u))}));function d(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var l=t.length,r=new Array(l);r[0]=i;var o={};for(var m in a)hasOwnProperty.call(a,m)&&(o[m]=a[m]);o.originalType=e,o.mdxType="string"==typeof e?e:n,r[1]=o;for(var p=2;p<l;p++)r[p]=t[p];return s.createElement.apply(null,r)}return s.createElement.apply(null,t)}i.displayName="MDXCreateElement"},85162:(e,a,t)=>{t.d(a,{Z:()=>r});var s=t(67294),n=t(86010);const l="tabItem_Ymn6";function r(e){let{children:a,hidden:t,className:r}=e;return s.createElement("div",{role:"tabpanel",className:(0,n.Z)(l,r),hidden:t},a)}},74866:(e,a,t)=>{t.d(a,{Z:()=>x});var s=t(83117),n=t(67294),l=t(86010),r=t(12466),o=t(16550),m=t(91980),p=t(67392),u=t(50012);function c(e){return function(e){var a;return(null==(a=n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:a.filter(Boolean))??[]}(e).map((e=>{let{props:{value:a,label:t,attributes:s,default:n}}=e;return{value:a,label:t,attributes:s,default:n}}))}function i(e){const{values:a,children:t}=e;return(0,n.useMemo)((()=>{const e=a??c(t);return function(e){const a=(0,p.l)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,t])}function d(e){let{value:a,tabValues:t}=e;return t.some((e=>e.value===a))}function y(e){let{queryString:a=!1,groupId:t}=e;const s=(0,o.k6)(),l=function(e){let{queryString:a=!1,groupId:t}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:a,groupId:t});return[(0,m._X)(l),(0,n.useCallback)((e=>{if(!l)return;const a=new URLSearchParams(s.location.search);a.set(l,e),s.replace({...s.location,search:a.toString()})}),[l,s])]}function b(e){const{defaultValue:a,queryString:t=!1,groupId:s}=e,l=i(e),[r,o]=(0,n.useState)((()=>function(e){let{defaultValue:a,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!d({value:a,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:a,tabValues:l}))),[m,p]=y({queryString:t,groupId:s}),[c,b]=function(e){let{groupId:a}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(a),[s,l]=(0,u.Nk)(t);return[s,(0,n.useCallback)((e=>{t&&l.set(e)}),[t,l])]}({groupId:s}),f=(()=>{const e=m??c;return d({value:e,tabValues:l})?e:null})();(0,n.useLayoutEffect)((()=>{f&&o(f)}),[f]);return{selectedValue:r,selectValue:(0,n.useCallback)((e=>{if(!d({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),p(e),b(e)}),[p,b,l]),tabValues:l}}var f=t(72389);const h="tabList__CuJ",g="tabItem_LNqP";function T(e){let{className:a,block:t,selectedValue:o,selectValue:m,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.o5)(),i=e=>{const a=e.currentTarget,t=u.indexOf(a),s=p[t].value;s!==o&&(c(a),m(s))},d=e=>{var a;let t=null;switch(e.key){case"Enter":i(e);break;case"ArrowRight":{const a=u.indexOf(e.currentTarget)+1;t=u[a]??u[0];break}case"ArrowLeft":{const a=u.indexOf(e.currentTarget)-1;t=u[a]??u[u.length-1];break}}null==(a=t)||a.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":t},a)},p.map((e=>{let{value:a,label:t,attributes:r}=e;return n.createElement("li",(0,s.Z)({role:"tab",tabIndex:o===a?0:-1,"aria-selected":o===a,key:a,ref:e=>u.push(e),onKeyDown:d,onClick:i},r,{className:(0,l.Z)("tabs__item",g,null==r?void 0:r.className,{"tabs__item--active":o===a})}),t??a)})))}function k(e){let{lazy:a,children:t,selectedValue:s}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(a){const e=l.find((e=>e.props.value===s));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},l.map(((e,a)=>(0,n.cloneElement)(e,{key:a,hidden:e.props.value!==s}))))}function v(e){const a=b(e);return n.createElement("div",{className:(0,l.Z)("tabs-container",h)},n.createElement(T,(0,s.Z)({},e,a)),n.createElement(k,(0,s.Z)({},e,a)))}function x(e){const a=(0,f.Z)();return n.createElement(v,(0,s.Z)({key:String(a)},e))}},31989:(e,a,t)=>{t.d(a,{Z:()=>l});var s=t(67294),n=t(52263);const l=function(e){const{className:a,py:t,scala:l,csharp:r,sourceLink:o}=e,m=(0,n.Z)().siteConfig.customFields.version;let p=`https://mmlspark.blob.core.windows.net/docs/${m}/pyspark/${t}`,u=`https://mmlspark.blob.core.windows.net/docs/${m}/scala/${l}`;return s.createElement("table",null,s.createElement("tbody",null,s.createElement("tr",null,s.createElement("td",null,s.createElement("strong",null,"Python API: "),s.createElement("a",{href:p},a)),s.createElement("td",null,s.createElement("strong",null,"Scala API: "),s.createElement("a",{href:u},a)),s.createElement("td",null,s.createElement("strong",null,"Source: "),s.createElement("a",{href:o},a)))))}},88770:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>M,contentTitle:()=>I,default:()=>P,frontMatter:()=>C,metadata:()=>w,toc:()=>L});var s=t(83117),n=(t(67294),t(3905)),l=t(74866),r=t(85162),o=t(31989);const m=[{value:"Explainers",id:"explainers",level:2},{value:"ImageLIME",id:"imagelime",level:3},{value:"ImageSHAP",id:"imageshap",level:3},{value:"TabularLIME",id:"tabularlime",level:3},{value:"TabularSHAP",id:"tabularshap",level:3},{value:"TextLIME",id:"textlime",level:3},{value:"TextSHAP",id:"textshap",level:3},{value:"VectorLIME",id:"vectorlime",level:3},{value:"VectorSHAP",id:"vectorshap",level:3}],p={toc:m};function u(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,s.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"explainers"},"Explainers"),(0,n.kt)("h3",{id:"imagelime"},"ImageLIME"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.explainers import *\nfrom synapse.ml.onnx import ONNXModel\n\nmodel = ONNXModel()\n\nlime = (ImageLIME()\n    .setModel(model)\n    .setOutputCol("weights")\n    .setInputCol("image")\n    .setCellSize(150.0)\n    .setModifier(50.0)\n    .setNumSamples(500)\n    .setTargetCol("probability")\n    .setTargetClassesCol("top2pred")\n    .setSamplingFraction(0.7))\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.explainers._\nimport com.microsoft.azure.synapse.ml.onnx._\nimport spark.implicits._\n\nval model = (new ONNXModel())\n\nval lime = (new ImageLIME()\n    .setModel(model)\n    .setOutputCol("weights")\n    .setInputCol("image")\n    .setCellSize(150.0)\n    .setModifier(50.0)\n    .setNumSamples(500)\n    .setTargetCol("probability")\n    .setTargetClassesCol("top2pred")\n    .setSamplingFraction(0.7))\n')))),(0,n.kt)(o.Z,{className:"ImageLIME",py:"synapse.ml.explainers.html#module-synapse.ml.explainers.ImageLIME",scala:"com/microsoft/azure/synapse/ml/explainers/ImageLIME.html",csharp:"classSynapse_1_1ML_1_1Explainers_1_1ImageLIME.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/explainers/ImageLIME.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"imageshap"},"ImageSHAP"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.explainers import *\nfrom synapse.ml.onnx import ONNXModel\n\nmodel = ONNXModel()\n\nshap = (\n    ImageSHAP()\n    .setModel(model)\n    .setOutputCol("shaps")\n    .setSuperpixelCol("superpixels")\n    .setInputCol("image")\n    .setCellSize(150.0)\n    .setModifier(50.0)\n    .setNumSamples(500)\n    .setTargetCol("probability")\n    .setTargetClassesCol("top2pred")\n)\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.explainers._\nimport com.microsoft.azure.synapse.ml.onnx._\nimport spark.implicits._\n\nval model = (new ONNXModel())\n\nval shap = (new ImageSHAP()\n    .setModel(model)\n    .setOutputCol("shaps")\n    .setSuperpixelCol("superpixels")\n    .setInputCol("image")\n    .setCellSize(150.0)\n    .setModifier(50.0)\n    .setNumSamples(500)\n    .setTargetCol("probability")\n    .setTargetClassesCol("top2pred")\n))\n')))),(0,n.kt)(o.Z,{className:"ImageSHAP",py:"synapse.ml.explainers.html#module-synapse.ml.explainers.ImageSHAP",scala:"com/microsoft/azure/synapse/ml/explainers/ImageSHAP.html",csharp:"classSynapse_1_1ML_1_1Explainers_1_1ImageSHAP.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/explainers/ImageSHAP.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"tabularlime"},"TabularLIME"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.explainers import *\nfrom synapse.ml.onnx import ONNXModel\n\nmodel = ONNXModel()\ndata = spark.createDataFrame([\n    (-6.0, 0),\n    (-5.0, 0),\n    (5.0, 1),\n    (6.0, 1)\n], ["col1", "label"])\n\nlime = (TabularLIME()\n    .setModel(model)\n    .setInputCols(["col1"])\n    .setOutputCol("weights")\n    .setBackgroundData(data)\n    .setKernelWidth(0.001)\n    .setNumSamples(1000)\n    .setTargetCol("probability")\n    .setTargetClasses([0, 1]))\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.explainers._\nimport com.microsoft.azure.synapse.ml.onnx._\nimport spark.implicits._\n\nval model = (new ONNXModel())\nval data = Seq(\n  (-6.0, 0),\n  (-5.0, 0),\n  (5.0, 1),\n  (6.0, 1)\n).toDF("col1", "label")\n\nval lime = (new TabularLIME()\n    .setInputCols(Array("col1"))\n    .setOutputCol("weights")\n    .setBackgroundData(data)\n    .setKernelWidth(0.001)\n    .setNumSamples(1000)\n    .setModel(model)\n    .setTargetCol("probability")\n    .setTargetClasses(Array(0, 1)))\n')))),(0,n.kt)(o.Z,{className:"TabularLIME",py:"synapse.ml.explainers.html#module-synapse.ml.explainers.TabularLIME",scala:"com/microsoft/azure/synapse/ml/explainers/TabularLIME.html",csharp:"classSynapse_1_1ML_1_1Explainers_1_1TabularLIME.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/explainers/TabularLIME.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"tabularshap"},"TabularSHAP"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.explainers import *\nfrom synapse.ml.onnx import ONNXModel\n\nmodel = ONNXModel()\ndata = spark.createDataFrame([\n    (-5.0, "a", -5.0, 0),\n    (-5.0, "b", -5.0, 0),\n    (5.0, "a", 5.0, 1),\n    (5.0, "b", 5.0, 1)\n]*100, ["col1", "label"])\n\nshap = (TabularSHAP()\n    .setInputCols(["col1", "col2", "col3"])\n    .setOutputCol("shapValues")\n    .setBackgroundData(data)\n    .setNumSamples(1000)\n    .setModel(model)\n    .setTargetCol("probability")\n    .setTargetClasses([1]))\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.explainers._\nimport com.microsoft.azure.synapse.ml.onnx._\nimport spark.implicits._\n\nval model = (new ONNXModel())\nval data = (1 to 100).flatMap(_ => Seq(\n    (-5d, "a", -5d, 0),\n    (-5d, "b", -5d, 0),\n    (5d, "a", 5d, 1),\n    (5d, "b", 5d, 1)\n  )).toDF("col1", "col2", "col3", "label")\n\nval shap = (new TabularSHAP()\n    .setInputCols(Array("col1", "col2", "col3"))\n    .setOutputCol("shapValues")\n    .setBackgroundData(data)\n    .setNumSamples(1000)\n    .setModel(model)\n    .setTargetCol("probability")\n    .setTargetClasses(Array(1)))\n')))),(0,n.kt)(o.Z,{className:"TabularSHAP",py:"synapse.ml.explainers.html#module-synapse.ml.explainers.TabularSHAP",scala:"com/microsoft/azure/synapse/ml/explainers/TabularSHAP.html",csharp:"classSynapse_1_1ML_1_1Explainers_1_1TabularSHAP.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/explainers/TabularSHAP.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"textlime"},"TextLIME"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.explainers import *\nfrom synapse.ml.onnx import ONNXModel\n\nmodel = ONNXModel()\n\nlime = (TextLIME()\n    .setModel(model)\n    .setInputCol("text")\n    .setTargetCol("prob")\n    .setTargetClasses([1])\n    .setOutputCol("weights")\n    .setTokensCol("tokens")\n    .setSamplingFraction(0.7)\n    .setNumSamples(1000))\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.explainers._\nimport com.microsoft.azure.synapse.ml.onnx._\nimport spark.implicits._\n\nval model = (new ONNXModel())\n\nval lime = (new TextLIME()\n    .setModel(model)\n    .setInputCol("text")\n    .setTargetCol("prob")\n    .setTargetClasses(Array(1))\n    .setOutputCol("weights")\n    .setTokensCol("tokens")\n    .setSamplingFraction(0.7)\n    .setNumSamples(1000))\n')))),(0,n.kt)(o.Z,{className:"TextLIME",py:"synapse.ml.explainers.html#module-synapse.ml.explainers.TextLIME",scala:"com/microsoft/azure/synapse/ml/explainers/TextLIME.html",csharp:"classSynapse_1_1ML_1_1Explainers_1_1TextLIME.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/explainers/TextLIME.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"textshap"},"TextSHAP"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.explainers import *\nfrom synapse.ml.onnx import ONNXModel\n\nmodel = ONNXModel()\n\nshap = (TextSHAP()\n    .setModel(model)\n    .setInputCol("text")\n    .setTargetCol("prob")\n    .setTargetClasses([1])\n    .setOutputCol("weights")\n    .setTokensCol("tokens")\n    .setNumSamples(1000))\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.explainers._\nimport com.microsoft.azure.synapse.ml.onnx._\nimport spark.implicits._\n\nval model = (new ONNXModel())\n\nval shap = (new TextSHAP()\n    .setModel(model)\n    .setInputCol("text")\n    .setTargetCol("prob")\n    .setTargetClasses(Array(1))\n    .setOutputCol("weights")\n    .setTokensCol("tokens")\n    .setNumSamples(1000))\n')))),(0,n.kt)(o.Z,{className:"TextSHAP",py:"synapse.ml.explainers.html#module-synapse.ml.explainers.TextSHAP",scala:"com/microsoft/azure/synapse/ml/explainers/TextSHAP.html",csharp:"classSynapse_1_1ML_1_1Explainers_1_1TextSHAP.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/explainers/TextSHAP.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"vectorlime"},"VectorLIME"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.explainers import *\nfrom synapse.ml.onnx import ONNXModel\n\nmodel = ONNXModel()\n\ndf = spark.createDataFrame([\n  ([0.2729799734928408, -0.4637273304253777, 1.565593782147994], 4.541185129673482),\n  ([1.9511879801376864, 1.495644437589599, -0.4667847796501322], 0.19526424470709836)\n])\n\nlime = (VectorLIME()\n    .setModel(model)\n    .setBackgroundData(df)\n    .setInputCol("features")\n    .setTargetCol("label")\n    .setOutputCol("weights")\n    .setNumSamples(1000))\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.explainers._\nimport spark.implicits._\nimport breeze.linalg.{*, DenseMatrix => BDM}\nimport breeze.stats.distributions.Rand\nimport org.apache.spark.ml.linalg.Vectors\nimport org.apache.spark.ml.regression.LinearRegression\n\nval d1 = 3\nval d2 = 1\nval coefficients: BDM[Double] = new BDM(d1, d2, Array(1.0, -1.0, 2.0))\n\nval df = {\n    val nRows = 100\n    val intercept: Double = math.random()\n\n    val x: BDM[Double] = BDM.rand(nRows, d1, Rand.gaussian)\n    val y = x * coefficients + intercept\n\n    val xRows = x(*, ::).iterator.toSeq.map(dv => Vectors.dense(dv.toArray))\n    val yRows = y(*, ::).iterator.toSeq.map(dv => dv(0))\n    xRows.zip(yRows).toDF("features", "label")\n  }\n\nval model: LinearRegressionModel = new LinearRegression().fit(df)\n\nval lime = (new VectorLIME()\n    .setModel(model)\n    .setBackgroundData(df)\n    .setInputCol("features")\n    .setTargetCol(model.getPredictionCol)\n    .setOutputCol("weights")\n    .setNumSamples(1000))\n')))),(0,n.kt)(o.Z,{className:"VectorLIME",py:"synapse.ml.explainers.html#module-synapse.ml.explainers.VectorLIME",scala:"com/microsoft/azure/synapse/ml/explainers/VectorLIME.html",csharp:"classSynapse_1_1ML_1_1Explainers_1_1VectorLIME.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/explainers/VectorLIME.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"vectorshap"},"VectorSHAP"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.explainers import *\nfrom synapse.ml.onnx import ONNXModel\n\nmodel = ONNXModel()\n\nshap = (VectorSHAP()\n    .setInputCol("features")\n    .setOutputCol("shapValues")\n    .setNumSamples(1000)\n    .setModel(model)\n    .setTargetCol("probability")\n    .setTargetClasses([1]))\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.explainers._\nimport spark.implicits._\nimport breeze.linalg.{*, DenseMatrix => BDM}\nimport breeze.stats.distributions.RandBasis\nimport org.apache.spark.ml.classification.LogisticRegression\nimport org.apache.spark.ml.linalg.Vectors\n\nval randBasis = RandBasis.withSeed(123)\nval m: BDM[Double] = BDM.rand[Double](1000, 5, randBasis.gaussian)\nval l: BDV[Double] = m(*, ::).map {\n    row =>\n      if (row(2) + row(3) > 0.5) 1d else 0d\n  }\nval data = m(*, ::).iterator.zip(l.valuesIterator).map {\n    case (f, l) => (f.toSpark, l)\n  }.toSeq.toDF("features", "label")\n\nval model = new LogisticRegression()\n    .setFeaturesCol("features")\n    .setLabelCol("label")\n    .fit(data)\n\nval shap = (new VectorSHAP()\n    .setInputCol("features")\n    .setOutputCol("shapValues")\n    .setBackgroundData(data)\n    .setNumSamples(1000)\n    .setModel(model)\n    .setTargetCol("probability")\n    .setTargetClasses(Array(1))\n\nval infer = Seq(\n    Tuple1(Vectors.dense(1d, 1d, 1d, 1d, 1d))\n  ) toDF "features"\nval predicted = model.transform(infer)\nshap.transform(predicted).show()\n')))),(0,n.kt)(o.Z,{className:"VectorSHAP",py:"synapse.ml.explainers.html#module-synapse.ml.explainers.VectorSHAP",scala:"com/microsoft/azure/synapse/ml/explainers/VectorSHAP.html",csharp:"classSynapse_1_1ML_1_1Explainers_1_1VectorSHAP.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/explainers/VectorSHAP.scala",mdxType:"DocTable"}))}u.isMDXComponent=!0;const c=[{value:"Featurize",id:"featurize",level:2},{value:"DataConversion",id:"dataconversion",level:3},{value:"IndexToValue",id:"indextovalue",level:3},{value:"Featurize Text",id:"featurize-text",level:2},{value:"MultiNGram",id:"multingram",level:3},{value:"PageSplitter",id:"pagesplitter",level:3}],i={toc:c};function d(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,s.Z)({},i,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"featurize"},"Featurize"),(0,n.kt)("h3",{id:"dataconversion"},"DataConversion"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.featurize import *\n\ndf = spark.createDataFrame([\n    (True, 1, 2, 3, 4, 5.0, 6.0, "7", "8.0"),\n    (False, 9, 10, 11, 12, 14.5, 15.5, "16", "17.456"),\n    (True, -127, 345, 666, 1234, 18.91, 20.21, "100", "200.12345")\n], ["bool", "byte", "short", "int", "long", "float", "double", "intstring", "doublestring"])\n\ndc = (DataConversion()\n        .setCols(["byte"])\n        .setConvertTo("boolean"))\n\ndc.transform(df).show()\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.featurize._\nimport spark.implicits._\n\nval df = Seq(\n    (true: Boolean, 1: Byte, 2: Short, 3: Integer, 4: Long, 5.0F, 6.0, "7", "8.0"),\n    (false, 9: Byte, 10: Short, 11: Integer, 12: Long, 14.5F, 15.5, "16", "17.456"),\n    (true, -127: Byte, 345: Short, Short.MaxValue + 100, (Int.MaxValue).toLong + 100, 18.91F, 20.21, "100", "200.12345"))\n    .toDF("bool", "byte", "short", "int", "long", "float", "double", "intstring", "doublestring")\n\nval dc = (new DataConversion()\n        .setCols(Array("byte"))\n        .setConvertTo("boolean"))\n\ndc.transform(df).show()\n')))),(0,n.kt)(o.Z,{className:"DataConversion",py:"synapse.ml.featurize.html#module-synapse.ml.featurize.DataConversion",scala:"com/microsoft/azure/synapse/ml/featurize/DataConversion.html",csharp:"classSynapse_1_1ML_1_1Featurize_1_1DataConversion.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/featurize/DataConversion.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"indextovalue"},"IndexToValue"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.featurize import *\n\ndf = spark.createDataFrame([\n    (-3, 24, 0.32534, True, "piano"),\n    (1, 5, 5.67, False, "piano"),\n    (-3, 5, 0.32534, False, "guitar")\n], ["int", "long", "double", "bool", "string"])\n\ndf2 = ValueIndexer().setInputCol("string").setOutputCol("string_cat").fit(df).transform(df)\n\nitv = (IndexToValue()\n        .setInputCol("string_cat")\n        .setOutputCol("string_noncat"))\n\nitv.transform(df2).show()\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.featurize._\nimport spark.implicits._\n\nval df = Seq[(Int, Long, Double, Boolean, String)](\n    (-3, 24L, 0.32534, true, "piano"),\n    (1, 5L, 5.67, false, "piano"),\n    (-3, 5L, 0.32534, false, "guitar")).toDF("int", "long", "double", "bool", "string")\n\nval df2 = new ValueIndexer().setInputCol("string").setOutputCol("string_cat").fit(df).transform(df)\n\nval itv = (new IndexToValue()\n        .setInputCol("string_cat")\n        .setOutputCol("string_noncat"))\n\nitv.transform(df2).show()\n')))),(0,n.kt)(o.Z,{className:"IndexToValue",py:"synapse.ml.featurize.html#module-synapse.ml.featurize.IndexToValue",scala:"com/microsoft/azure/synapse/ml/featurize/IndexToValue.html",csharp:"classSynapse_1_1ML_1_1Featurize_1_1IndexToValue.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/featurize/IndexToValue.scala",mdxType:"DocTable"}),(0,n.kt)("h2",{id:"featurize-text"},"Featurize Text"),(0,n.kt)("h3",{id:"multingram"},"MultiNGram"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.featurize.text import *\nfrom pyspark.ml.feature import Tokenizer\n\ndfRaw = spark.createDataFrame([\n    (0, "Hi I"),\n    (1, "I wish for snow today"),\n    (2, "we Cant go to the park, because of the snow!"),\n    (3, ""),\n    (4, "1 2 3 4 5 6 7 8 9")\n], ["label", "sentence"])\n\ndfTok = (Tokenizer()\n    .setInputCol("sentence")\n    .setOutputCol("tokens")\n    .transform(dfRaw))\n\nmng = (MultiNGram()\n    .setLengths([1, 3, 4])\n    .setInputCol("tokens")\n    .setOutputCol("ngrams"))\n\nmng.transform(dfTok).show()\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.featurize.text._\nimport org.apache.spark.ml.feature.Tokenizer\nimport spark.implicits._\n\nval dfRaw = (Seq(\n    (0, "Hi I"),\n    (1, "I wish for snow today"),\n    (2, "we Cant go to the park, because of the snow!"),\n    (3, ""),\n    (4, (1 to 10).map(_.toString).mkString(" ")))\n    .toDF("label", "sentence"))\n\nval dfTok = (new Tokenizer()\n    .setInputCol("sentence")\n    .setOutputCol("tokens")\n    .transform(dfRaw))\n\nval mng = (new MultiNGram()\n    .setLengths(Array(1, 3, 4))\n    .setInputCol("tokens")\n    .setOutputCol("ngrams"))\n\nmng.transform(dfTok).show()\n')))),(0,n.kt)(o.Z,{className:"MultiNGram",py:"synapse.ml.featurize.text.html#module-synapse.ml.featurize.text.MultiNGram",scala:"com/microsoft/azure/synapse/ml/featurize/text/MultiNGram.html",csharp:"classSynapse_1_1ML_1_1Featurize_1_1Text_1_1MultiNGram.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/featurize/text/MultiNGram.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"pagesplitter"},"PageSplitter"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.featurize.text import *\n\ndf = spark.createDataFrame([\n    ("words words  words     wornssaa ehewjkdiw weijnsikjn xnh", ),\n    ("s s  s   s     s           s", ),\n    ("hsjbhjhnskjhndwjnbvckjbnwkjwenbvfkjhbnwevkjhbnwejhkbnvjkhnbndjkbnd", ),\n    ("hsjbhjhnskjhndwjnbvckjbnwkjwenbvfkjhbnwevkjhbnwejhkbnvjkhnbndjkbnd 190872340870271091309831097813097130i3u709781", ),\n    ("", ),\n    (None, )\n], ["text"])\n\nps = (PageSplitter()\n    .setInputCol("text")\n    .setMaximumPageLength(20)\n    .setMinimumPageLength(10)\n    .setOutputCol("pages"))\n\nps.transform(df).show()\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.featurize.text._\nimport spark.implicits._\n\nval df = Seq(\n    "words words  words     wornssaa ehewjkdiw weijnsikjn xnh",\n    "s s  s   s     s           s",\n    "hsjbhjhnskjhndwjnbvckjbnwkjwenbvfkjhbnwevkjhbnwejhkbnvjkhnbndjkbnd",\n    "hsjbhjhnskjhndwjnbvckjbnwkjwenbvfkjhbnwevkjhbnwejhkbnvjkhnbndjkbnd " +\n      "190872340870271091309831097813097130i3u709781",\n    "",\n    null\n  ).toDF("text")\n\nval ps = (new PageSplitter()\n    .setInputCol("text")\n    .setMaximumPageLength(20)\n    .setMinimumPageLength(10)\n    .setOutputCol("pages"))\n\nps.transform(df).show()\n')))),(0,n.kt)(o.Z,{className:"PageSplitter",py:"synapse.ml.featurize.text.html#module-synapse.ml.featurize.text.PageSplitter",scala:"com/microsoft/azure/synapse/ml/featurize/text/PageSplitter.html",csharp:"classSynapse_1_1ML_1_1Featurize_1_1Text_1_1PageSplitter.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/featurize/text/PageSplitter.scala",mdxType:"DocTable"}))}d.isMDXComponent=!0;const y=[{value:"Image",id:"image",level:2},{value:"UnrollImage",id:"unrollimage",level:3},{value:"UnrollBinaryImage",id:"unrollbinaryimage",level:3},{value:"SuperpixelTransformer",id:"superpixeltransformer",level:3}],b={toc:y};function f(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,s.Z)({},b,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"image"},"Image"),(0,n.kt)("h3",{id:"unrollimage"},"UnrollImage"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.image import *\nfrom azure.storage.blob import *\n# images = (spark.read.format("image")\n#         .option("dropInvalid", True)\n#         .load("wasbs://datasets@mmlspark.blob.core.windows.net/LIME/greyscale.jpg"))\n# rit = (ResizeImageTransformer()\n#         .setOutputCol("out")\n#         .setHeight(15)\n#         .setWidth(10))\n# preprocessed = rit.transform(images)\nunroll = (UnrollImage()\n      .setInputCol("out")\n      .setOutputCol("final"))\n# unroll.transform(preprocessed).show()\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.image._\nimport spark.implicits._\nval images = (spark.read.format("image")\n    .option("dropInvalid", true)\n    .load("wasbs://datasets@mmlspark.blob.core.windows.net/LIME/greyscale.jpg"))\nval rit = (new ResizeImageTransformer()\n    .setOutputCol("out")\n    .setHeight(15)\n    .setWidth(10))\nval preprocessed = rit.transform(images)\nval unroll = (new UnrollImage()\n      .setInputCol(rit.getOutputCol)\n      .setOutputCol("final"))\nunroll.transform(preprocessed).show()\n')))),(0,n.kt)(o.Z,{className:"UnrollImage",py:"synapse.ml.image.html#module-synapse.ml.image.UnrollImage",scala:"com/microsoft/azure/synapse/ml/image/UnrollImage.html",csharp:"classSynapse_1_1ML_1_1Image_1_1UnrollImage.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/image/UnrollImage.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"unrollbinaryimage"},"UnrollBinaryImage"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.image import *\nunroll = (UnrollBinaryImage()\n      .setInputCol("input_col")\n      .setOutputCol("final"))\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.image._\nimport spark.implicits._\nval unroll = (new UnrollBinaryImage()\n        .setInputCol("input_col")\n        .setOutputCol("final"))\n')))),(0,n.kt)(o.Z,{className:"UnrollBinaryImage",py:"synapse.ml.image.html#module-synapse.ml.image.UnrollBinaryImage",scala:"com/microsoft/azure/synapse/ml/image/UnrollBinaryImage.html",csharp:"classSynapse_1_1ML_1_1Image_1_1UnrollBinaryImage.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/image/UnrollBinaryImage.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"superpixeltransformer"},"SuperpixelTransformer"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.image import *\n\nspt = (SuperpixelTransformer()\n      .setInputCol("images"))\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.image._\n\nval spt = (new SuperpixelTransformer()\n      .setInputCol("images"))\n')))),(0,n.kt)(o.Z,{className:"SuperpixelTransformer",py:"synapse.ml.lime.html#module-synapse.ml.image.SuperpixelTransformer",scala:"com/microsoft/azure/synapse/ml/image/SuperpixelTransformer.html",csharp:"classSynapse_1_1ML_1_1Image_1_1SuperpixelTransformer.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/image/SuperpixelTransformer.scala",mdxType:"DocTable"}))}f.isMDXComponent=!0;const h=[{value:"IO",id:"io",level:2},{value:"HTTPTransformer",id:"httptransformer",level:3},{value:"SimpleHTTPTransformer",id:"simplehttptransformer",level:3},{value:"JSONInputParser",id:"jsoninputparser",level:3},{value:"JSONOutputParser",id:"jsonoutputparser",level:3},{value:"StringOutputParser",id:"stringoutputparser",level:3},{value:"CustomInputParser",id:"custominputparser",level:3},{value:"CustomOutputParser",id:"customoutputparser",level:3}],g={toc:h};function T(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,s.Z)({},g,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"io"},"IO"),(0,n.kt)("h3",{id:"httptransformer"},"HTTPTransformer"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.io.http import *\nfrom pyspark.sql.functions import udf, col\nfrom requests import Request\n\ndef world_bank_request(country):\n    return Request("GET", "http://api.worldbank.org/v2/country/{}?format=json".format(country))\n\ndf = (spark.createDataFrame([("br",), ("usa",)], ["country"])\n      .withColumn("request", http_udf(world_bank_request)(col("country"))))\n\nht = (HTTPTransformer()\n      .setConcurrency(3)\n      .setInputCol("request")\n      .setOutputCol("response"))\n\nht.transform(df).show()\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.io.http._\n\nval ht = (new HTTPTransformer()\n      .setConcurrency(3)\n      .setInputCol("request")\n      .setOutputCol("response"))\n')))),(0,n.kt)(o.Z,{className:"HTTPTransformer",py:"synapse.ml.io.http.html#module-synapse.ml.io.http.HTTPTransformer",scala:"com/microsoft/azure/synapse/ml/io/http/HTTPTransformer.html",csharp:"classSynapse_1_1ML_1_1Io_1_1Http_1_1HTTPTransformer.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/io/http/HTTPTransformer.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"simplehttptransformer"},"SimpleHTTPTransformer"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.io.http import *\nfrom pyspark.sql.types import StringType, StructType\n\nsht = (SimpleHTTPTransformer()\n        .setInputCol("data")\n        .setOutputParser(JSONOutputParser()\n            .setDataType(StructType().add("blah", StringType())))\n        .setUrl("PUT_YOUR_URL")\n        .setOutputCol("results")\n        .setConcurrency(3))\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.io.http._\nimport org.apache.spark.sql.types.{StringType, StructType}\n\nval sht = (new SimpleHTTPTransformer()\n        .setInputCol("data")\n        .setOutputParser(new JSONOutputParser()\n            .setDataType(new StructType().add("blah", StringType)))\n        .setUrl("PUT_YOUR_URL")\n        .setOutputCol("results")\n        .setConcurrency(3))\n')))),(0,n.kt)(o.Z,{className:"SimpleHTTPTransformer",py:"synapse.ml.io.http.html#module-synapse.ml.io.http.SimpleHTTPTransformer",scala:"com/microsoft/azure/synapse/ml/io/http/SimpleHTTPTransformer.html",csharp:"classSynapse_1_1ML_1_1Io_1_1Http_1_1SimpleHTTPTransformer.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/io/http/SimpleHTTPTransformer.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"jsoninputparser"},"JSONInputParser"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.io.http import *\n\njsonIP = (JSONInputParser()\n      .setInputCol("data")\n      .setOutputCol("out")\n      .setUrl("PUT_YOUR_URL"))\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.io.http._\n\nval jsonIP = (new JSONInputParser()\n      .setInputCol("data")\n      .setOutputCol("out")\n      .setUrl("PUT_YOUR_URL"))\n')))),(0,n.kt)(o.Z,{className:"JSONInputParser",py:"synapse.ml.io.http.html#module-synapse.ml.io.http.JSONInputParser",scala:"com/microsoft/azure/synapse/ml/io/http/JSONInputParser.html",csharp:"classSynapse_1_1ML_1_1Io_1_1Http_1_1JSONInputParser.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/io/http/JSONInputParser.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"jsonoutputparser"},"JSONOutputParser"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.io.http import *\nfrom pyspark.sql.types import StringType, StructType\n\njsonOP = (JSONOutputParser()\n      .setDataType(StructType().add("foo", StringType()))\n      .setInputCol("unparsedOutput")\n      .setOutputCol("parsedOutput"))\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.io.http._\nimport org.apache.spark.sql.types.{StringType, StructType}\n\nval jsonOP = (new JSONOutputParser()\n      .setDataType(new StructType().add("foo", StringType))\n      .setInputCol("unparsedOutput")\n      .setOutputCol("parsedOutput"))\n')))),(0,n.kt)(o.Z,{className:"JSONOutputParser",py:"synapse.ml.io.http.html#module-synapse.ml.io.http.JSONOutputParser",scala:"com/microsoft/azure/synapse/ml/io/http/JSONOutputParser.html",csharp:"classSynapse_1_1ML_1_1Io_1_1Http_1_1JSONOutputParser.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/io/http/JSONOutputParser.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"stringoutputparser"},"StringOutputParser"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.io.http import *\n\nsop = (StringOutputParser()\n      .setInputCol("unparsedOutput")\n      .setOutputCol("out"))\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.io.http._\n\nval sop = (new StringOutputParser()\n      .setInputCol("unparsedOutput")\n      .setOutputCol("out"))\n')))),(0,n.kt)(o.Z,{className:"StringOutputParser",py:"synapse.ml.io.http.html#module-synapse.ml.io.http.StringOutputParser",scala:"com/microsoft/azure/synapse/ml/io/http/StringOutputParser.html",csharp:"classSynapse_1_1ML_1_1Io_1_1Http_1_1StringOutputParser.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/io/http/StringOutputParser.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"custominputparser"},"CustomInputParser"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.io.http import *\n\ncip = (CustomInputParser()\n      .setInputCol("data")\n      .setOutputCol("out"))\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.io.http._\n\nval cip = (new CustomInputParser()\n      .setInputCol("data")\n      .setOutputCol("out")\n      .setUDF({ x: Int => new HttpPost(s"http://$x") }))\n')))),(0,n.kt)(o.Z,{className:"CustomInputParser",py:"synapse.ml.io.http.html#module-synapse.ml.io.http.CustomInputParser",scala:"com/microsoft/azure/synapse/ml/io/http/CustomInputParser.html",csharp:"classSynapse_1_1ML_1_1Io_1_1Http_1_1CustomInputParser.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/io/http/CustomInputParser.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"customoutputparser"},"CustomOutputParser"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.io.http import *\n\ncop = (CustomOutputParser()\n      .setInputCol("unparsedOutput")\n      .setOutputCol("out"))\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.io.http._\n\nval cop = (new CustomOutputParser()\n      .setInputCol("unparsedOutput")\n      .setOutputCol("out"))\n')))),(0,n.kt)(o.Z,{className:"CustomOutputParser",py:"synapse.ml.io.http.html#module-synapse.ml.io.http.CustomOutputParser",scala:"com/microsoft/azure/synapse/ml/io/http/CustomOutputParser.html",csharp:"classSynapse_1_1ML_1_1Io_1_1Http_1_1CustomOutputParser.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/io/http/CustomOutputParser.scala",mdxType:"DocTable"}))}T.isMDXComponent=!0;const k=[{value:"Stages",id:"stages",level:2},{value:"Cacher",id:"cacher",level:3},{value:"DropColumns",id:"dropcolumns",level:3},{value:"EnsembleByKey",id:"ensemblebykey",level:3},{value:"Explode",id:"explode",level:3},{value:"Lambda",id:"lambda",level:3},{value:"DynamicMiniBatchTransformer",id:"dynamicminibatchtransformer",level:3},{value:"FixedMiniBatchTransformer",id:"fixedminibatchtransformer",level:3},{value:"TimeIntervalMiniBatchTransformer",id:"timeintervalminibatchtransformer",level:3},{value:"FlattenBatch",id:"flattenbatch",level:3},{value:"RenameColumn",id:"renamecolumn",level:3},{value:"Repartition",id:"repartition",level:3},{value:"SelectColumns",id:"selectcolumns",level:3},{value:"StratifiedRepartition",id:"stratifiedrepartition",level:3},{value:"SummarizeData",id:"summarizedata",level:3},{value:"TextPreprocessor",id:"textpreprocessor",level:3},{value:"UDFTransformer",id:"udftransformer",level:3},{value:"UnicodeNormalize",id:"unicodenormalize",level:3}],v={toc:k};function x(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,s.Z)({},v,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"stages"},"Stages"),(0,n.kt)("h3",{id:"cacher"},"Cacher"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\n\ndf = (spark.createDataFrame([\n      (0, "guitars", "drums"),\n      (1, "piano", "trumpet"),\n      (2, "bass", "cymbals"),\n      (3, "guitars", "drums"),\n      (4, "piano", "trumpet"),\n      (5, "bass", "cymbals"),\n      (6, "guitars", "drums"),\n      (7, "piano", "trumpet"),\n      (8, "bass", "cymbals"),\n      (9, "guitars", "drums"),\n      (10, "piano", "trumpet"),\n      (11, "bass", "cymbals")\n      ], ["numbers", "words", "more"]))\n\ncacher = Cacher()\n\ncacher.transform(df).show()\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = Seq(\n      (0, "guitars", "drums"),\n      (1, "piano", "trumpet"),\n      (2, "bass", "cymbals"),\n      (3, "guitars", "drums"),\n      (4, "piano", "trumpet"),\n      (5, "bass", "cymbals"),\n      (6, "guitars", "drums"),\n      (7, "piano", "trumpet"),\n      (8, "bass", "cymbals"),\n      (9, "guitars", "drums"),\n      (10, "piano", "trumpet"),\n      (11, "bass", "cymbals")\n    ).toDF("numbers", "words", "more")\n\nval cacher = new Cacher()\n\ncacher.transform(df).show()\n')))),(0,n.kt)(o.Z,{className:"HTTPTransformer",py:"synapse.ml.stages.html#module-synapse.ml.stages.Cacher",scala:"com/microsoft/azure/synapse/ml/stages/Cacher.html",csharp:"classSynapse_1_1ML_1_1Stages_1_1Cacher.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/Cacher.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"dropcolumns"},"DropColumns"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\n\ndf = (spark.createDataFrame([\n      (0, 0, "guitars", "drums", 1, True),\n      (1, 1, "piano", "trumpet", 2, False),\n      (2, 2, "bass", "cymbals", 3, True)\n      ], ["numbers", "doubles", "words", "more", "longs", "booleans"]))\n\ndc = DropColumns().setCols([])\n\ndc.transform(df).show()\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = (Seq(\n      (0, 0.toDouble, "guitars", "drums", 1.toLong, true),\n      (1, 1.toDouble, "piano", "trumpet", 2.toLong, false),\n      (2, 2.toDouble, "bass", "cymbals", 3.toLong, true))\n      .toDF("numbers", "doubles", "words", "more", "longs", "booleans"))\n\nval dc = new DropColumns().setCols(Array())\n\ndc.transform(df).show()\n')))),(0,n.kt)(o.Z,{className:"DropColumns",py:"synapse.ml.stages.html#module-synapse.ml.stages.DropColumns",scala:"com/microsoft/azure/synapse/ml/stages/DropColumns.html",csharp:"classSynapse_1_1ML_1_1Stages_1_1DropColumns.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/DropColumns.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"ensemblebykey"},"EnsembleByKey"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\nfrom pyspark.ml.feature import VectorAssembler\n\nscoreDF = (spark.createDataFrame([\n      (0, "foo", 1.0, .1),\n      (1, "bar", 4.0, -2.0),\n      (1, "bar", 0.0, -3.0)\n      ], ["label1", "label2", "score1", "score2"]))\n\nva = VectorAssembler().setInputCols(["score1", "score2"]).setOutputCol("v1")\nscoreDF2 = va.transform(scoreDF)\n\nebk = EnsembleByKey().setKeys(["label1"]).setCols(["score1"])\n\nebk.transform(scoreDF2).show()\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\nimport org.apache.spark.ml.feature.VectorAssembler\n\nval scoreDF = (Seq(\n      (0, "foo", 1.0, .1),\n      (1, "bar", 4.0, -2.0),\n      (1, "bar", 0.0, -3.0))\n      .toDF("label1", "label2", "score1", "score2"))\n\nval va = new VectorAssembler().setInputCols(Array("score1", "score2")).setOutputCol("v1")\nval scoreDF2 = va.transform(scoreDF)\n\nval ebk = new EnsembleByKey().setKey("label1").setCol("score1")\n\nebk.transform(scoreDF2).show()\n')))),(0,n.kt)(o.Z,{className:"EnsembleByKey",py:"synapse.ml.stages.html#module-synapse.ml.stages.EnsembleByKey",scala:"com/microsoft/azure/synapse/ml/stages/EnsembleByKey.html",csharp:"classSynapse_1_1ML_1_1Stages_1_1EnsembleByKey.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/EnsembleByKey.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"explode"},"Explode"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\n\ndf = (spark.createDataFrame([\n      (0, ["guitars", "drums"]),\n      (1, ["piano"]),\n      (2, [])\n      ], ["numbers", "words"]))\n\nexplode = Explode().setInputCol("words").setOutputCol("exploded")\n\nexplode.transform(df).show()\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = (Seq(\n    (0, Seq("guitars", "drums")),\n    (1, Seq("piano")),\n    (2, Seq()))\n    .toDF("numbers", "words"))\n\nval explode = new Explode().setInputCol("words").setOutputCol("exploded")\n\nexplode.transform(df).show()\n')))),(0,n.kt)(o.Z,{className:"Explode",py:"synapse.ml.stages.html#module-synapse.ml.stages.Explode",scala:"com/microsoft/azure/synapse/ml/stages/Explode.html",csharp:"classSynapse_1_1ML_1_1Stages_1_1Explode.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/Explode.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"lambda"},"Lambda"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\nfrom pyspark.sql.types import StringType, StructType\n\ndf = (spark.createDataFrame([\n      (0, 0.0, "guitars", "drums", 1, True),\n      (1, 1.0, "piano", "trumpet", 2, False),\n      (2, 2.0, "bass", "cymbals", 3, True)\n      ], ["numbers", "doubles", "words", "more", "longs", "booleans"]))\n\ndef transformFunc(df):\n      return df.select("numbers")\n\ndef transformSchemaFunc(schema):\n      return StructType([schema("numbers")])\n\nl = (Lambda()\n      .setTransformFunc(transformFunc)\n      .setTransformSchemaFunc(transformSchemaFunc))\n\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\nimport org.apache.spark.sql.types.{StringType, StructType}\n\nval df = (Seq(\n      (0, 0.toDouble, "guitars", "drums", 1.toLong, true),\n      (1, 1.toDouble, "piano", "trumpet", 2.toLong, false),\n      (2, 2.toDouble, "bass", "cymbals", 3.toLong, true))\n      .toDF("numbers", "doubles", "words", "more", "longs", "booleans"))\n\nval lambda = (new Lambda()\n      .setTransform(df => df.select("numbers"))\n      .setTransformSchema(schema => new StructType(Array(schema("numbers")))))\n\nlambda.transform(df).show()\n')))),(0,n.kt)(o.Z,{className:"Lambda",py:"synapse.ml.stages.html#module-synapse.ml.stages.Lambda",scala:"com/microsoft/azure/synapse/ml/stages/Lambda.html",csharp:"classSynapse_1_1ML_1_1Stages_1_1Lambda.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/Lambda.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"dynamicminibatchtransformer"},"DynamicMiniBatchTransformer"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\nfrom pyspark.sql.types import StringType, StructType\n\ndf = (spark.createDataFrame([(_, "foo") for _ in range(1, 11)], ["in1", "in2"]))\n\ndmbt = DynamicMiniBatchTransformer()\n\ndmbt.transform(df).show()\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = (1 until 11).map(x => (x, "foo")).toDF("in1", "in2")\n\nval dmbt = new DynamicMiniBatchTransformer()\n\ndmbt.transform(df).show()\n')))),(0,n.kt)(o.Z,{className:"DynamicMiniBatchTransformer",py:"synapse.ml.stages.html#module-synapse.ml.stages.DynamicMiniBatchTransformer",scala:"com/microsoft/azure/synapse/ml/stages/DynamicMiniBatchTransformer.html",csharp:"classSynapse_1_1ML_1_1Stages_1_1DynamicMiniBatchTransformer.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/MiniBatchTransformer.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"fixedminibatchtransformer"},"FixedMiniBatchTransformer"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from synapse.ml.stages import *\n\nfmbt = (FixedMiniBatchTransformer()\n      .setBuffered(True)\n      .setBatchSize(3))\n"))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},"import com.microsoft.azure.synapse.ml.stages._\n\nval fmbt = (new FixedMiniBatchTransformer()\n      .setBuffered(true)\n      .setBatchSize(3))\n")))),(0,n.kt)(o.Z,{className:"FixedMiniBatchTransformer",py:"synapse.ml.stages.html#module-synapse.ml.stages.FixedMiniBatchTransformer",scala:"com/microsoft/azure/synapse/ml/stages/FixedMiniBatchTransformer.html",csharp:"classSynapse_1_1ML_1_1Stages_1_1FixedMiniBatchTransformer.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/MiniBatchTransformer.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"timeintervalminibatchtransformer"},"TimeIntervalMiniBatchTransformer"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\n\ndf = (spark.createDataFrame([(_, "foo") for _ in range(1, 11)], ["in1", "in2"]))\n\ntimbt = (TimeIntervalMiniBatchTransformer()\n        .setMillisToWait(1000)\n        .setMaxBatchSize(30))\n\ntimbt.transform(df).show()\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = (1 until 11).map(x => (x, "foo")).toDF("in1", "in2")\n\nval timbt = (new TimeIntervalMiniBatchTransformer()\n        .setMillisToWait(1000)\n        .setMaxBatchSize(30))\n\ntimbt.transform(df).show()\n')))),(0,n.kt)(o.Z,{className:"TimeIntervalMiniBatchTransformer",py:"synapse.ml.stages.html#module-synapse.ml.stages.TimeIntervalMiniBatchTransformer",scala:"com/microsoft/azure/synapse/ml/stages/TimeIntervalMiniBatchTransformer.html",csharp:"classSynapse_1_1ML_1_1Stages_1_1TimeIntervalMiniBatchTransformer.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/MiniBatchTransformer.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"flattenbatch"},"FlattenBatch"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\n\ndf = (spark.createDataFrame([(_, "foo") for _ in range(1, 11)], ["in1", "in2"]))\n\ntransDF = DynamicMiniBatchTransformer().transform(df)\n\nfb = FlattenBatch()\n\nfb.transform(transDF).show()\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = (1 until 11).map(x => (x, "foo")).toDF("in1", "in2")\n\nval transDF = new DynamicMiniBatchTransformer().transform(df)\n\nval fb = new FlattenBatch()\n\nfb.transform(transDF).show()\n')))),(0,n.kt)(o.Z,{className:"FlattenBatch",py:"synapse.ml.stages.html#module-synapse.ml.stages.FlattenBatch",scala:"com/microsoft/azure/synapse/ml/stages/FlattenBatch.html",csharp:"classSynapse_1_1ML_1_1Stages_1_1FlattenBatch.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/MiniBatchTransformer.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"renamecolumn"},"RenameColumn"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\n\ndf = (spark.createDataFrame([\n      (0, 0, "guitars", "drums", 1, True),\n      (1, 1, "piano", "trumpet", 2, False),\n      (2, 2, "bass", "cymbals", 3, True)\n], ["numbers", "doubles", "words", "more", "longs", "booleans"]))\n\nrc = RenameColumn().setInputCol("words").setOutputCol("numbers")\n\nrc.transform(df).show()\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = (Seq(\n      (0, 0.toDouble, "guitars", "drums", 1.toLong, true),\n      (1, 1.toDouble, "piano", "trumpet", 2.toLong, false),\n      (2, 2.toDouble, "bass", "cymbals", 3.toLong, true))\n      .toDF("numbers", "doubles", "words", "more", "longs", "booleans"))\n\nval rc = new RenameColumn().setInputCol("words").setOutputCol("numbers")\n\nrc.transform(df).show()\n')))),(0,n.kt)(o.Z,{className:"RenameColumn",py:"synapse.ml.stages.html#module-synapse.ml.stages.RenameColumn",scala:"com/microsoft/azure/synapse/ml/stages/RenameColumn.html",csharp:"classSynapse_1_1ML_1_1Stages_1_1RenameColumn.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/RenameColumn.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"repartition"},"Repartition"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\n\ndf = (spark.createDataFrame([\n      (0, "guitars", "drums"),\n      (1, "piano", "trumpet"),\n      (2, "bass", "cymbals"),\n      (3, "guitars", "drums"),\n      (4, "piano", "trumpet"),\n      (5, "bass", "cymbals"),\n      (6, "guitars", "drums"),\n      (7, "piano", "trumpet"),\n      (8, "bass", "cymbals"),\n      (9, "guitars", "drums"),\n      (10, "piano", "trumpet"),\n      (11, "bass", "cymbals")\n], ["numbers", "words", "more"]))\n\nrepartition = Repartition().setN(1)\n\nrepartition.transform(df).show()\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = (Seq(\n    (0, "guitars", "drums"),\n    (1, "piano", "trumpet"),\n    (2, "bass", "cymbals"),\n    (3, "guitars", "drums"),\n    (4, "piano", "trumpet"),\n    (5, "bass", "cymbals"),\n    (6, "guitars", "drums"),\n    (7, "piano", "trumpet"),\n    (8, "bass", "cymbals"),\n    (9, "guitars", "drums"),\n    (10, "piano", "trumpet"),\n    (11, "bass", "cymbals")\n  ).toDF("numbers", "words", "more"))\n\nval repartition = new Repartition().setN(1)\n\nrepartition.transform(df).show()\n')))),(0,n.kt)(o.Z,{className:"Repartition",py:"synapse.ml.stages.html#module-synapse.ml.stages.Repartition",scala:"com/microsoft/azure/synapse/ml/stages/Repartition.html",csharp:"classSynapse_1_1ML_1_1Stages_1_1Repartition.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/Repartition.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"selectcolumns"},"SelectColumns"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\n\ndf = (spark.createDataFrame([\n      (0, 0.0, "guitars", "drums", 1, True),\n      (1, 1.0, "piano", "trumpet", 2, False),\n      (2, 2.0, "bass", "cymbals", 3, True)\n], ["numbers", "words", "more"]))\n\nsc = SelectColumns().setCols(["words", "more"])\n\nsc.transform(df).show()\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = (Seq(\n      (0, 0.toDouble, "guitars", "drums", 1.toLong, true),\n      (1, 1.toDouble, "piano", "trumpet", 2.toLong, false),\n      (2, 2.toDouble, "bass", "cymbals", 3.toLong, true))\n      .toDF("numbers", "doubles", "words", "more", "longs", "booleans"))\n\nval sc = new SelectColumns().setCols(Array("words", "more"))\n\nsc.transform(df).show()\n')))),(0,n.kt)(o.Z,{className:"SelectColumns",py:"synapse.ml.stages.html#module-synapse.ml.stages.SelectColumns",scala:"com/microsoft/azure/synapse/ml/stages/SelectColumns.html",csharp:"classSynapse_1_1ML_1_1Stages_1_1SelectColumns.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/SelectColumns.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"stratifiedrepartition"},"StratifiedRepartition"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\n\ndf = (spark.createDataFrame([\n      (0, "Blue", 2),\n      (0, "Red", 2),\n      (0, "Green", 2),\n      (1, "Purple", 2),\n      (1, "Orange", 2),\n      (1, "Indigo", 2),\n      (2, "Violet", 2),\n      (2, "Black", 2),\n      (2, "White", 2),\n      (3, "Gray", 2),\n      (3, "Yellow", 2),\n      (3, "Cerulean", 2)\n], ["values", "colors", "const"]))\n\nsr = StratifiedRepartition().setLabelCol("values").setMode("equal")\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = (Seq(\n    (0, "Blue", 2),\n    (0, "Red", 2),\n    (0, "Green", 2),\n    (1, "Purple", 2),\n    (1, "Orange", 2),\n    (1, "Indigo", 2),\n    (2, "Violet", 2),\n    (2, "Black", 2),\n    (2, "White", 2),\n    (3, "Gray", 2),\n    (3, "Yellow", 2),\n    (3, "Cerulean", 2)\n  ).toDF("values", "colors", "const"))\n\nval sr = new StratifiedRepartition().setLabelCol("values").setMode("equal")\n\nsr.transform(df).show()\n')))),(0,n.kt)(o.Z,{className:"StratifiedRepartition",py:"synapse.ml.stages.html#module-synapse.ml.stages.StratifiedRepartition",scala:"com/microsoft/azure/synapse/ml/stages/StratifiedRepartition.html",csharp:"classSynapse_1_1ML_1_1Stages_1_1StratifiedRepartition.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/StratifiedRepartition.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"summarizedata"},"SummarizeData"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\n\ndf = (spark.createDataFrame([\n      (0, 0.0, "guitars", "drums", 1, True),\n      (1, 1.0, "piano", "trumpet", 2, False),\n      (2, 2.0, "bass", "cymbals", 3, True)\n], ["numbers", "doubles", "words", "more", "longs", "booleans"]))\n\nsummary = SummarizeData()\n\nsummary.transform(df).show()\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = (Seq(\n      (0, 0.toDouble, "guitars", "drums", 1.toLong, true),\n      (1, 1.toDouble, "piano", "trumpet", 2.toLong, false),\n      (2, 2.toDouble, "bass", "cymbals", 3.toLong, true))\n      .toDF("numbers", "doubles", "words", "more", "longs", "booleans"))\n\nval summary = new SummarizeData()\n\nsummary.transform(df).show()\n')))),(0,n.kt)(o.Z,{className:"SummarizeData",py:"synapse.ml.stages.html#module-synapse.ml.stages.SummarizeData",scala:"com/microsoft/azure/synapse/ml/stages/SummarizeData.html",csharp:"classSynapse_1_1ML_1_1Stages_1_1SummarizeData.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/SummarizeData.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"textpreprocessor"},"TextPreprocessor"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\n\ndf = (spark.createDataFrame([\n      ("The happy sad boy drank sap", ),\n      ("The hater sad doy drank sap", ),\n      ("foo", ),\n      ("The hater sad doy aABc0123456789Zz_", )\n], ["words1"]))\n\ntestMap = {"happy": "sad", "hater": "sap",\n      "sad": "sap", "sad doy": "sap"}\n\ntextPreprocessor = (TextPreprocessor()\n      .setNormFunc("lowerCase")\n      .setMap(testMap)\n      .setInputCol("words1")\n      .setOutputCol("out"))\n\ntextPreprocessor.transform(df).show()\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = (Seq(\n    ("The happy sad boy drank sap", ),\n    ("The hater sad doy drank sap", ),\n    ("foo", ),\n    ("The hater sad doy aABc0123456789Zz_", ))\n    .toDF("words1"))\n\nval testMap = Map[String, String] (\n    "happy"   -> "sad",\n    "hater"   -> "sap",\n    "sad"     -> "sap",\n    "sad doy" -> "sap"\n  )\n\nval textPreprocessor = (new TextPreprocessor()\n      .setNormFunc("lowerCase")\n      .setMap(testMap)\n      .setInputCol("words1")\n      .setOutputCol("out"))\n\ntextPreprocessor.transform(df).show()\n')))),(0,n.kt)(o.Z,{className:"TextPreprocessor",py:"synapse.ml.stages.html#module-synapse.ml.stages.TextPreprocessor",scala:"com/microsoft/azure/synapse/ml/stages/TextPreprocessor.html",csharp:"classSynapse_1_1ML_1_1Stages_1_1TextPreprocessor.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/TextPreprocessor.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"udftransformer"},"UDFTransformer"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\nfrom pyspark.sql.functions import udf\n\ndf = (spark.createDataFrame([\n      (0, 0.0, "guitars", "drums", 1, True),\n      (1, 1.0, "piano", "trumpet", 2, False),\n      (2, 2.0, "bass", "cymbals", 3, True)\n], ["numbers", "doubles", "words", "more", "longs", "booleans"]))\n\nstringToIntegerUDF = udf(lambda x: 1)\n\nudfTransformer = (UDFTransformer()\n      .setUDF(stringToIntegerUDF)\n      .setInputCol("numbers")\n      .setOutputCol("out"))\n\nudfTransformer.transform(df).show()\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\nimport org.apache.spark.sql.functions.udf\n\nval df = (Seq(\n      (0, 0.toDouble, "guitars", "drums", 1.toLong, true),\n      (1, 1.toDouble, "piano", "trumpet", 2.toLong, false),\n      (2, 2.toDouble, "bass", "cymbals", 3.toLong, true))\n      .toDF("numbers", "doubles", "words", "more", "longs", "booleans"))\n\nval stringToIntegerUDF = udf((_: String) => 1)\n\nval udfTransformer = (new UDFTransformer()\n      .setUDF(stringToIntegerUDF)\n      .setInputCol("numbers")\n      .setOutputCol("out"))\n\nudfTransformer.transform(df).show()\n')))),(0,n.kt)(o.Z,{className:"UDFTransformer",py:"synapse.ml.stages.html#module-synapse.ml.stages.UDFTransformer",scala:"com/microsoft/azure/synapse/ml/stages/UDFTransformer.html",csharp:"classSynapse_1_1ML_1_1Stages_1_1UDFTransformer.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/UDFTransformer.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"unicodenormalize"},"UnicodeNormalize"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\n\ndf = (spark.createDataFrame([\n      ("Sch\xf6n", 1),\n      ("Scho\\u0308n", 1),\n      (None, 1)\n], ["words1", "dummy"]))\n\nunicodeNormalize = (UnicodeNormalize()\n      .setForm("NFC")\n      .setInputCol("words1")\n      .setOutputCol("norm1"))\n\nunicodeNormalize.transform(df).show()\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = (Seq(\n    ("Sch\xf6n", 1),\n    ("Scho\\u0308n", 1),\n    (null, 1))\n    .toDF("words1", "dummy"))\n\nval unicodeNormalize = (new UnicodeNormalize()\n      .setForm("NFC")\n      .setInputCol("words1")\n      .setOutputCol("norm1"))\n\nunicodeNormalize.transform(df).show()\n')))),(0,n.kt)(o.Z,{className:"UnicodeNormalize",py:"synapse.ml.stages.html#module-synapse.ml.stages.UnicodeNormalize",scala:"com/microsoft/azure/synapse/ml/stages/UnicodeNormalize.html",csharp:"classSynapse_1_1ML_1_1Stages_1_1UnicodeNormalize.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/UnicodeNormalize.scala",mdxType:"DocTable"}))}x.isMDXComponent=!0;const S=[{value:"Train",id:"train",level:2},{value:"ComputeModelStatistics",id:"computemodelstatistics",level:3},{value:"ComputePerInstanceStatistics",id:"computeperinstancestatistics",level:3}],_={toc:S};function N(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,s.Z)({},_,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"train"},"Train"),(0,n.kt)("h3",{id:"computemodelstatistics"},"ComputeModelStatistics"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.train import *\nfrom numpy import random\n\ndf = spark.createDataFrame(\n      [(random.rand(), random.rand()) for _ in range(2048)], ["label", "prediction"]\n)\n\ncms = (ComputeModelStatistics()\n      .setLabelCol("label")\n      .setScoredLabelsCol("prediction")\n      .setEvaluationMetric("classification"))\n\ncms.transform(df).show()\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.train._\nimport scala.util.Random\n\nval rand = new Random(1337)\nval df = (Seq.fill(2048)(rand.nextDouble())\n      .zip(Seq.fill(2048)(rand.nextDouble()))\n      .toDF("label", "prediction"))\n\nval cms = (new ComputeModelStatistics()\n      .setLabelCol("label")\n      .setScoredLabelsCol("prediction")\n      .setEvaluationMetric("classification"))\n\ncms.transform(df).show()\n')))),(0,n.kt)(o.Z,{className:"ComputeModelStatistics",py:"synapse.ml.train.html#module-synapse.ml.train.ComputeModelStatistics",scala:"com/microsoft/azure/synapse/ml/train/ComputeModelStatistics.html",csharp:"classSynapse_1_1ML_1_1Train_1_1ComputeModelStatistics.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/train/ComputeModelStatistics.scala",mdxType:"DocTable"}),(0,n.kt)("h3",{id:"computeperinstancestatistics"},"ComputePerInstanceStatistics"),(0,n.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,n.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.train import *\n\ncps = (ComputePerInstanceStatistics()\n      .setLabelCol("label")\n      .setScoredLabelsCol("LogRegScoredLabelsCol")\n      .setScoresCol("LogRegScoresCol")\n      .setScoredProbabilitiesCol("LogRegProbCol")\n      .setEvaluationMetric("classification"))\n'))),(0,n.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.train._\nimport org.apache.spark.ml.classification.LogisticRegression\nimport org.apache.spark.ml.feature.FastVectorAssembler\n\nval logisticRegression = (new LogisticRegression()\n      .setRegParam(0.3)\n      .setElasticNetParam(0.8)\n      .setMaxIter(10)\n      .setLabelCol("label")\n      .setPredictionCol("LogRegScoredLabelsCol")\n      .setRawPredictionCol("LogRegScoresCol")\n      .setProbabilityCol("LogRegProbCol")\n      .setFeaturesCol("features"))\n\nval dataset = spark.createDataFrame(Seq(\n    (0.0, 2, 0.50, 0.60, 0.0),\n    (1.0, 3, 0.40, 0.50, 1.0),\n    (2.0, 4, 0.78, 0.99, 2.0),\n    (3.0, 5, 0.12, 0.34, 3.0),\n    (0.0, 1, 0.50, 0.60, 0.0),\n    (1.0, 3, 0.40, 0.50, 1.0),\n    (2.0, 3, 0.78, 0.99, 2.0),\n    (3.0, 4, 0.12, 0.34, 3.0),\n    (0.0, 0, 0.50, 0.60, 0.0),\n    (1.0, 2, 0.40, 0.50, 1.0),\n    (2.0, 3, 0.78, 0.99, 2.0),\n    (3.0, 4, 0.12, 0.34, 3.0)))\n    .toDF("label", "col1", "col2", "col3", "prediction")\n\nval assembler = (new FastVectorAssembler()\n      .setInputCols(Array("col1", "col2", "col3"))\n      .setOutputCol("features"))\nval assembledDataset = assembler.transform(dataset)\nval model = logisticRegression.fit(assembledDataset)\nval scoredData = model.transform(assembledDataset)\n\nval cps = (new ComputePerInstanceStatistics()\n      .setLabelCol("label")\n      .setScoredLabelsCol("LogRegScoredLabelsCol")\n      .setScoresCol("LogRegScoresCol")\n      .setScoredProbabilitiesCol("LogRegProbCol")\n      .setEvaluationMetric("classification"))\n\ncps.transform(scoredData).show()\n')))),(0,n.kt)(o.Z,{className:"ComputePerInstanceStatistics",py:"synapse.ml.train.html#module-synapse.ml.train.ComputePerInstanceStatistics",scala:"com/microsoft/azure/synapse/ml/train/ComputePerInstanceStatistics.html",csharp:"classSynapse_1_1ML_1_1Train_1_1ComputePerInstanceStatistics.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/train/ComputePerInstanceStatistics.scala",mdxType:"DocTable"}))}N.isMDXComponent=!0;const C={title:"Transformers - Core",sidebar_label:"Core",hide_title:!0},I=void 0,w={unversionedId:"Quick Examples/transformers/transformers_core",id:"version-1.0.7/Quick Examples/transformers/transformers_core",title:"Transformers - Core",description:"",source:"@site/versioned_docs/version-1.0.7/Quick Examples/transformers/transformers_core.md",sourceDirName:"Quick Examples/transformers",slug:"/Quick Examples/transformers/transformers_core",permalink:"/SynapseML/docs/Quick Examples/transformers/transformers_core",draft:!1,tags:[],version:"1.0.7",frontMatter:{title:"Transformers - Core",sidebar_label:"Core",hide_title:!0}},M={},L=[...m,...c,...y,...h,...k,...S],D={toc:L};function P(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,s.Z)({},D,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)(u,{mdxType:"Explainers"}),(0,n.kt)(d,{mdxType:"Featurize"}),(0,n.kt)(f,{mdxType:"Image"}),(0,n.kt)(T,{mdxType:"IO"}),(0,n.kt)(x,{mdxType:"Stages"}),(0,n.kt)(N,{mdxType:"Train"}))}P.isMDXComponent=!0}}]);