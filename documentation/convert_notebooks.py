import os
from datetime import datetime
import argparse
import yaml
from nbconvert import MarkdownExporter
from yaml.loader import BaseLoader
from time import sleep



def convert_notebook_to_md(input_file):
    """
    convert notebook (.ipynb) file to markdown format

    :param input_file: jupyter notebook
    :type input_file: str
    :return: converted md file
    :rtype: str
    """
    md_exporter = MarkdownExporter()
    nb_body, _ = md_exporter.from_filename(input_file)
    return nb_body

def mapping_ms_authors(github_authors, mapping):
    """
    given github authors' id and mapping, return their MS alias
    (ms alias are required metadata for Azure Doc) 

    :param github_authors: all authors' github id
    :type github_authors: list
    :param mapping: github account : all authors' ms alias 
    :type mapping: dict
    :return: ms alias of all the authors if applicable
    :rtype: list
    """
    ms_authors = [mapping[e] for e in github_authors if e in mapping]
    if not ms_authors:
        return ['None']
    return ms_authors

class Document:
    def __init__(self, input_path, output_dir, github_authors, service, new_title):
        self.input_path = input_path
        self.output_dir = output_dir
        self.github_authors = github_authors
        self.service = service
        self.new_title = new_title
        # generated by run
        self.meta_data = None
        self.body = None

        
    def generate_metadata(self, file, github_authors, ms_authors, update_date, service, new_title):
        """
        take a file and the authors name, generate metadata
        """

        template = """---\ntitle: {title}\ndescription: {description}\nauthor: {github_authors}\nms.author: {ms_authors}\nms.date: {date}\nms.topic: tutorial\nms.service: {service}\n---\n"""
        ms_author_alias = ", ".join(ms_authors)
        github_author_id = ", ".join(github_authors)
        if new_title:
            title = new_title
        else:
            title = file.replace(".ipynb", "")
        metadata = template.format(title=title, description=title, github_authors=github_author_id, ms_authors=ms_author_alias, date=update_date, service=service)
        return metadata

    def run(self):
        
        # Convert notebook to md
        # TODO: get notebook file from github directly 
        self.body = convert_notebook_to_md(self.input_path)
        # Get github authors from args. Can not use notebook authors as Azure Doc authors.
        # Azure Doc require MS authors and contributors need to make content contributions through the private repository
        # so the content can be staged and validated by the current validation rules. (Jan 4th, 2023)
        github_authors = self.github_authors.split(", ")
        # mapping ms authors
        ms_authors = mapping_ms_authors(github_authors, mapping)
        # update date
        update_date = datetime.today().strftime("%m/%d/%Y")
        # prepare metadata
        abs_path = os.path.abspath(self.input_path)
        file_name = abs_path.split('\\')[-1] # \\ for windows, / otherwise
        self.metadata = self.generate_metadata(file_name, github_authors, ms_authors, update_date, self.service, self.new_title)
        # write all to output file
        if self.new_title:
            md_file_name = self.new_title + '.md'
        else:
            md_file_name = file_name.replace(".ipynb", ".md")
        output_path = os.path.join(self.output_dir,md_file_name)
        if not os.path.exists(self.output_dir):
            os.mkdir(self.output_dir)
        with open(output_path,'w') as f:
            abs_path = os.path.abspath(output_path)
            f.write(self.metadata)
            f.write(self.body)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--input_path", help="input path of the jupyter notebook")
    parser.add_argument("--output_dir", help="md output directory")
    parser.add_argument("--github_authors", help="github authors, separated by ,")
    parser.add_argument("--service", help="ms.service, required metadata, eg:cognitive-search")
    parser.add_argument("--mapping_file", help="github_id:ms alias file")
    parser.add_argument("--new_title", help="set documentation title, optional, eg: Cognitive Services with SynapseML - Overview")
    args = parser.parse_args()
    with open(args.mapping_file, 'r') as f:
        mapping = yaml.load(f, Loader=BaseLoader)
    doc = Document(args.input_path, args.output_dir, args.github_authors, args.service, args.new_title)
    doc.run()