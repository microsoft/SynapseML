import os
from datetime import datetime
import argparse
import requests
import yaml
from nbconvert import MarkdownExporter
from yaml.loader import BaseLoader

with open('authors.yml', 'r') as f:
    mapping = yaml.load(f, Loader=BaseLoader)

def convert_notebook_to_md(input_file):
    """
    convert notebook (.ipynb) file to markdown format

    :param input_file: jupyter notebook
    :type input_file: str
    :return: converted md file
    :rtype: str
    """
    md_exporter = MarkdownExporter()
    nb_body, _ = md_exporter.from_filename(input_file)
    return nb_body


def get_github_author(github_path, owner, repo): 
    """
    given a file on github, find all authors' github id in chronological order, no duplicate
    (github authors are required metadata for Azure Doc)

    :param github_path: path to the file on github
    :type github_path: str
    :param owner: github repo owner
    :type owner: str, eg: microsoft
    :param repo: github repo name, eg: SynapseML
    :type repo: str
    :return: github authors' id  
    :rtype: list
    """
    # TODO: sign in for a higher rate limit
    # TODO: generate author for notebook without commit history
    url = "https://api.github.com/repos/{owner}/{repo}/commits?path={github_path}".replace(" ", "%20").format(owner=owner, repo=repo, github_path=github_path)
    commits = requests.get(url).json()
    seen = set()
    github_authors = []
    for e in reversed(commits):
        if e['author']['login'] not in seen:
            seen.add(e['author']['login'])
            github_authors.append(e['author']['login'])
    return github_authors

def mapping_ms_authors(github_authors, mapping):
    """
    given github authors' id and mapping, return their MS alias
    (ms alias are required metadata for Azure Doc) 

    :param github_authors: all authors' github id
    :type github_authors: list
    :param mapping: github account : all authors' ms alias 
    :type mapping: dict
    :return: ms alias of all the authors if applicable
    :rtype: list
    """
    ms_authors = [mapping[e] for e in github_authors if e in mapping]
    if not ms_authors:
        return ['None']
    return ms_authors

class Document:
    def __init__(self, input_path, output_dir, owner, repo, service):
        self.input_path = input_path
        self.output_dir = output_dir
        self.owner = owner
        self.repo = repo
        self.service = service
        # generated by run
        self.meta_data = None
        self.body = None

        
    def generate_metadata(self, file, github_authors, ms_authors, update_date, service):
        """
        take a file and the authors name, generate metadata
        """

        template = """---\ntitle: {title}\ndescription: {description}\nauthor: {github_authors}\nms.author: {ms_authors}\nms.date: {date}\nms.topic: tutorial\nms.service: {service}\n---\n"""
        ms_author_alias = ", ".join(ms_authors)
        github_author_id = ", ".join(github_authors)
        title = file.replace(".ipynb", "")
        metadata = template.format(title=title, description=title, github_authors=github_author_id, ms_authors=ms_author_alias, date=update_date, service=service)
        return metadata

    def run(self):
        
        # Convert notebook to md
        # TODO: get notebook file from github directly 
        self.body = convert_notebook_to_md(self.input_path)
        # get github authors
        abs_path = os.path.abspath(self.input_path)
        github_path = '/'.join(abs_path[abs_path.find(self.repo)+len(self.repo):].split('\\'))
        github_authors = get_github_author(github_path, self.owner, self.repo)
        # mapping ms authors
        ms_authors = mapping_ms_authors(github_authors, mapping)
        # update date
        update_date = datetime.today().strftime("%m/%d/%Y")
        # prepare metadata
        file_name = abs_path.split('/')[-1] # \\ for windows
        self.metadata = self.generate_metadata(file_name, github_authors, ms_authors, update_date, self.service)
        # write all to output file
        md_file_name = file_name.replace(".ipynb", ".md")
        output_path = os.path.join(self.output_dir,md_file_name)
        if not os.path.exists(self.output_dir):
            os.mkdir(self.output_dir)
        with open(output_path,'w') as f:
            #print(output_path)
            #abs_path = os.path.abspath(output_path)
            #print(abs_path)
            f.write(self.metadata)
            f.write(self.body)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--input_path", help="input path of the jupyter notebook")
    parser.add_argument("--output_dir", help="md output directory")
    parser.add_argument("--owner", help="github repo owner, eg: microsoft")
    parser.add_argument("--repo", help="github repo, eg: SynapseML")
    parser.add_argument("--service", help="ms.service, required metadata, eg:cognitive-search")
    args = parser.parse_args()
    doc = Document(args.input_path, args.output_dir, args.owner, args.repo, args.service)
    doc.run()